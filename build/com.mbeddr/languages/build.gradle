import de.itemis.mps.gradle.*

// :build:com.mbeddr.build
def script_build_mbeddr = new File(scriptsBasePath + "/com.mbeddr.build/" + "build.xml")

ant.taskdef(name: "makeTests",
        classname: "com.mbeddr.tools.ant.MakeTestsTask",
        classpath: file(rootProject.projectDir.absolutePath + "/tools/ant/tasks/TeamcityMakeTests.jar")
)

// Ant <junit> task support
repositories {
    mavenCentral()
}
configurations {
    junitAnt
    mbeddrPlatform
}

dependencies {
    junitAnt 'junit:junit:4.12'
    junitAnt('org.apache.ant:ant-junit:1.9.7') {
        transitive = false
    }
    junitAnt('org.apache.ant:ant-junit4:1.9.7') {
        transitive = false
    }
    mbeddrPlatform "com.mbeddr:platform:$mbeddrPlatformBuildNumber"
}


task resolve_mbeddr_platform() {
    doLast {
        copy {
            from {
                    configurations.mbeddrPlatform.resolve().collect { zipTree(it) }
                 }
            into artifactsDir
        }
    }
}



//move spawner into mbeddr script
task build_spawner(type: BuildLanguages, dependsOn: ':build:com.mbeddr:platform:copy_allScripts') {
    script scriptFile('com.mbeddr.build/spawner.xml')
}

task copy_spawner(type: Copy, dependsOn: build_spawner) {
    from "$rootDir/artifacts/spawner/"
    into "$mpsHomeDir/plugins"
}

task copy_logConfig(type: Copy, dependsOn: ':build:com.mbeddr:platform:copy_allScripts') {
    from "$rootDir/debug"
    into "$mpsHomeDir/bin"
}

task install_spawner(type: Copy, dependsOn: build_spawner) {
    from "$rootDir/artifacts/spawner/"
    include "mbeddr.spawner/"
    into "$mpsPluginsDir"
}
tasks.getByPath(':build:com.mbeddr:install').dependsOn install_spawner

ant.taskdef(name: 'junit', classname: 'org.apache.tools.ant.taskdefs.optional.junit.JUnitTask',
        classpath: configurations.junitAnt.asPath)
ant.taskdef(name: 'junitreport', classname: 'org.apache.tools.ant.taskdefs.optional.junit.XMLResultAggregator',
        classpath: configurations.junitAnt.asPath)

def mbeddrDependencies

//on teamcity we don't build the platform we take it from the nexus. Locally we want to build it
if (ciBuild) {
    mbeddrDependencies = [copy_spawner, resolve_mbeddr_platform]
} else {
    mbeddrDependencies = [copy_spawner, ':build:com.mbeddr:platform:build_platform']
}

task build_mbeddr(type: BuildLanguages, dependsOn: mbeddrDependencies) {
    script script_build_mbeddr
    outputs.dir("$artifactsDir/mbeddr")
}

def script_test_mbeddrTutorial = new File(scriptsBasePath + "/com.mbeddr.tutorial/" + "build-tests.xml")

def script_test_mbeddrPerformance = new File(scriptsBasePath + "/com.mbeddr.core/" + "build-performance-tests.xml")
def script_test_mbeddrDebugger = new File(scriptsBasePath + "/com.mbeddr.debugger/" + "build-tests.xml")
def script_test_mbeddrCoreEx = new File(scriptsBasePath + "/com.mbeddr.core/" + "build-ex-tests.xml")
def script_test_mbeddrCoreExLibrary = new File(scriptsBasePath + "/com.mbeddr.core/" + "build-aLibrary.xml")
def script_test_mbeddrCoreTs = new File(scriptsBasePath + "/com.mbeddr.core/" + "build-ts-tests.xml")
def script_test_mbeddrCcTs = new File(scriptsBasePath + "/com.mbeddr.cc/" + "build-ts-tests.xml")
def script_test_mbeddrCcEx = new File(scriptsBasePath + "/com.mbeddr.cc/" + "build-ex-tests.xml")
def script_test_mbeddrExtTs = new File(scriptsBasePath + "/com.mbeddr.ext/" + "build-ts-tests.xml")
def script_test_mbeddrExtEx = new File(scriptsBasePath + "/com.mbeddr.ext/" + "build-ex-tests.xml")
def script_test_mbeddrXmodelEx = new File(scriptsBasePath + "/com.mbeddr.xmodel/" + "build-ex-tests.xml")


def script_build_tutorialLanguages = new File(scriptsBasePath + "/com.mbeddr.tutorial/" + "build-languages.xml")
def script_build_tutorialSolutions = new File(scriptsBasePath + "/com.mbeddr.tutorial/" + "build-solutions.xml")

task build_tutorial_languages(type: BuildLanguages, dependsOn: build_mbeddr) {
    script script_build_tutorialLanguages
}

task build_tutorial_solutions(type: BuildLanguages, dependsOn: build_tutorial_languages) {
    script script_build_tutorialSolutions
}

task build_tutorial(dependsOn: build_tutorial_solutions) { }


task test_mbeddr_tutorial(type: TestLanguages, dependsOn: build_tutorial) {
    script script_test_mbeddrTutorial
}
task test_mbeddr_ext_ts(type: TestLanguages, dependsOn: build_mbeddr) {
    script script_test_mbeddrExtTs
}
task test_mbeddr_performance(type: TestLanguages, dependsOn: build_mbeddr) {
    script script_test_mbeddrPerformance
}

task test_mbeddr_debugger(type: TestLanguages, dependsOn: build_mbeddr) {
    script script_test_mbeddrDebugger
}

task build_mbeddr_core_ex(type: BuildLanguages, dependsOn: [build_mbeddr, copy_logConfig]) {
    script script_test_mbeddrCoreEx
}

task test_mbeddr_core_ts(type: TestLanguages, dependsOn: build_mbeddr) {
    script script_test_mbeddrCoreTs
}

task test_mbeddr_core_ex {
	doLast {
		ant.makeTests(workingDirectory: rootProject.projectDir.absolutePath + "/code/languages/com.mbeddr.core")
	}
}

task test_mbeddr_core(dependsOn: [test_mbeddr_core_ex, test_mbeddr_core_ts]) {

}

task test_mbeddr_cc_ex {
	doLast {
		ant.makeTests(workingDirectory: rootProject.projectDir.absolutePath + "/code/languages/com.mbeddr.cc")
	}
}

task build_mbeddr_cc_ex(type: RunAntScript, dependsOn: build_mbeddr) {
    script script_test_mbeddrCcEx
    targets 'clean', 'generate'
}

task test_mbeddr_cc_ts(type: TestLanguages, dependsOn: build_mbeddr) {
    script script_test_mbeddrCcTs
}

task test_mbeddr_cc(dependsOn: [build_mbeddr_cc_ex, test_mbeddr_cc_ex, test_mbeddr_cc_ts]) {}

task build_mbeddr_ext_ex(type: BuildLanguages, dependsOn: build_mbeddr) {
    script script_test_mbeddrExtEx
}
task build_mbeddr_xmodel_ex(type: BuildLanguages, dependsOn: build_mbeddr) {
    script script_test_mbeddrXmodelEx
}

task test_mbeddr_ext_ex {
	doLast {
		ant.makeTests(workingDirectory: rootProject.projectDir.absolutePath + "/code/languages/com.mbeddr.ext")
	}
}

task test_mbeddr_ext(dependsOn: [build_mbeddr_ext_ex, test_mbeddr_ext_ex, test_mbeddr_ext_ts]) {}

task test_mbeddr_xmodel(dependsOn: []) {}

task test_mbeddr(dependsOn: [test_mbeddr_core, test_mbeddr_performance, test_mbeddr_cc, test_mbeddr_ext, test_mbeddr_xmodel]) {}

def pubDeb
if (ciBuild) {
    pubDeb = test_mbeddr
} else {
    pubDeb = build_mbeddr
}

task package_mbeddr(type: Zip, dependsOn: pubDeb) {
    archiveFileName = 'com.mbeddr.zip'
    from artifactsDir
    include "mbeddr/**"
}

publishing {
    publications {
        mbeddr(MavenPublication) {
            groupId 'com.mbeddr'
            artifactId 'mbeddr'
            version mbeddrBuildNumber
            artifact(package_mbeddr) {}
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                configurations.mbeddrPlatform.resolvedConfiguration.firstLevelModuleDependencies.each{
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.moduleGroup)
                    dependencyNode.appendNode('artifactId', it.moduleName)
                    dependencyNode.appendNode('version', it.moduleVersion)
                    dependencyNode.appendNode('type', it.moduleArtifacts[0].type)
                }
            }
        }
    }
}



task publishMbeddrToLocal (dependsOn: ['publishMbeddrPublicationToMavenLocal',
':build:com.mbeddr:platform:publishMbeddrPlatformToLocal']) {}

//mbeddr build is "master" also for maintenance branches
//using the closure to delay evaluate from configuration to execution phase is important because the
//mbeddrBuild property is created by a "subproject" block which is executed after this script is configured.
//if no closure is used the build script won't compile.
if({project.mbeddrBuild}() == "master") {
    /* this is pretty much a workaround so we don't need to change anything in Teamcity. Teamcity calls the  publishMbeddrPlatformPublicationToMavenRepository
       tasks but since we have a new publishing target we would need to change the teamcity config to also include publishMbeddrPlatformPublicationToGitHubPackagesRepository
       If we change the Teamcity configuration this would break older maintenance and feature branches and we would loose the ablilty to
       rebuild the exact same source code. There for this workaround is present that adds a dependency between the itemis maven repo
       and github packages when we are on master or a maintenance branch.
       */
    tasks.findByName("publishMbeddrPublicationToMavenRepository").dependsOn("publishMbeddrPublicationToGitHubPackagesRepository")
}

check.dependsOn test_mbeddr
