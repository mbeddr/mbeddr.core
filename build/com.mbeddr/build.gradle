// path variables
// If mpsHomeDir is set explicitly, skip the MPS resolution step and use the explicit path (which may be relative from
// the root directory).
ext.skipresolve_mps = project.hasProperty('mpsHomeDir')
ext.effectiveMpsHomeDir = rootProject.file(project.findProperty('mpsHomeDir') ?: "MPS/MPS-mbeddr-$mpsBuild/")

def userHome = System.properties['user.home']
def mpsPluginsDirPattern
def os_name = System.properties['os.name'].toLowerCase()
// calculate system-specific plugins directory (since MPS 2020.1) according to:
// https://www.jetbrains.com/help/idea/tuning-the-ide.html?_ga=2.229302868.95678467.1595072035-1152171669.1521775253#plugins-directory
if (os_name.contains('mac')) {
    mpsPluginsDirPattern = "$userHome/Library/Application Support/JetBrains/%s/plugins"
} else if (os_name.contains('win')) {
    mpsPluginsDirPattern = "${System.getenv('APPDATA')}\\JetBrains\\%s\\plugins"
} else {
    mpsPluginsDirPattern = "$userHome/.local/share/JetBrains/%s"
}

if (project.hasProperty("MPS_PATHS_SELECTOR")) {
    ext.mpsPluginsDir = sprintf(mpsPluginsDirPattern, project.getProperty("MPS_PATHS_SELECTOR"))
} else {
    ext.mpsPluginsDir = sprintf(mpsPluginsDirPattern, "MPS$mpsMajor")
}

task install() {
    // dependencies to this task are added dynamically from other scripts (com.mbeddr.platform, com.mbeddr.languages)
    description "Install the required plugins into the MPS plugin repository"
    group "Build Setup"
    doFirst {
        // check parent gradle file for definition of the variables
        println "Installing required mbeddr plugins to '$mpsPluginsDir'"
        if (!project.hasProperty("MPS_PATHS_SELECTOR")) {
            println "To change 'MPS<...>' part, pass MPS_PATHS_SELECTOR property to gradle with -PMPS_PATHS_SELECTOR=<custom path selector>"
            println "The path selector only contains the actual MPS version, for instance \"MPS2017.3\", not the full path to the user plugin directory."
        }
    }
}

logger.info "skipresolve_mps: {}, effectiveMpsHomeDir: {}", ext.skipresolve_mps, ext.effectiveMpsHomeDir

// JDK_HOME required for adding tools.jar into classpath of the forked ant process
if (!hasProperty("jdk_home")) {
    def java_home = System.properties['java.home']
    def jdk_home = java_home
    if (!file("$jdk_home/lib").exists()) {
        throw new GradleException("Was not able to locate jdk home folder. Use 'jdk_home' project variable to specify JDK location explicitly. Current JAVA_HOME is: $java_home")
    }
    ext.jdk_home = jdk_home
}

logger.info "jdk_home: $jdk_home"

// ant script locations
ext.scriptsBasePath = rootProject.file("scripts").absolutePath

ant.taskdef(name: "makeTests",
        classname: "com.mbeddr.tools.ant.MakeTestsTask",
        classpath: file(rootProject.projectDir.absolutePath + "/tools/ant/tasks/TeamcityMakeTests.jar")
)

// mbeddr properties
subprojects {
    apply plugin: 'mbeddr-conventions'

    // configs
    configurations {
        mps
        mpsExtensions
    }

    dependencies {
        mps "com.jetbrains:mps:$mpsBuild"
        mpsExtensions "de.itemis.mps:extensions:$mpsExtensionsVersion"
    }
}


File scriptFile(String relativePath) {
    new File("$rootDir/scripts/$relativePath")
}


task printVersions {
    doLast {
        println "mbeddrBuildNumber: $project.mbeddrBuildNumber"
        println "mbeddrPlatformBuildNumber: $project.mbeddrPlatformBuildNumber"
    }
}

task printRepositories {
    doLast {
        println "snapshotRepository: $snapshotRepository"
        println "releaseRepository: $releaseRepository"
        println "dependencyRepositories: $dependencyRepositories"
    }
}
