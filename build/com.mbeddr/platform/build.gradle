import de.itemis.mps.gradle.*

def script_test_mbeddrPlatform = new File(scriptsBasePath + "/com.mbeddr.platform/" + "build-ts-tests.xml")

if (project.skipresolve_mps) {
    task resolve_mps {
        doLast {
            logger.info "MPS resolution skipped"
        }
    }
} else {
    task resolve_mps(type: Copy) {
        dependsOn configurations.mps
        from {
            configurations.mps.resolve().collect { zipTree(it) }
        }
        into mpsHomeDir
    }
}

if (project.hasProperty('mpsExtensionsZip')) {
    task resolve_mps_extensions(type: Copy) {
        from {
            zipTree(project.property('mpsExtensionsZip'))
        }
        into artifactsDir
    }
} else {
    task resolve_mps_extensions(type: Copy) {
        dependsOn configurations.mpsExtensions
        from {
            configurations.mpsExtensions.resolve().collect { zipTree(it) }
        }
        into artifactsDir
    }
}

task build_allScripts(type: BuildLanguages, dependsOn: [resolve_mps, resolve_mps_extensions]) {
    doFirst {
        if (ciBuild) {
            // Coerce TeamCity build number to mbeddrPlatformBuildNumber
            // (see https://octopus.com/blog/teamcity-version-numbers-based-on-branches for details)
            println "##teamcity[buildNumber '${mbeddrPlatformBuildNumber}']"
        }
    }
    script rootProject.file('build/com.mbeddr.allScripts/build.xml')
}

task copy_allScripts(type: Copy, dependsOn: build_allScripts) {
    from "$rootDir/build"
    from "$rootDir/code/plugins"
    into "$rootDir/scripts"
    include "*/*.xml"
}

task publish_allScripts(type: Zip, dependsOn: build_allScripts) {
    archiveName 'com.mbeddr.allScripts.build.zip'
    from artifactsDir
    include "com.mbeddr.allScripts.build/**"
}

/*
// since MPS 2019.2 nativlibs plugin can be installed from the marketplace
task install_nativelibs_loader(type: Copy, dependsOn: resolve_extensions) {
    from "$artifactsDir/de.itemis.mps.extensions/"
    include "de.itemis.mps.nativelibs.loader/"
    into "$mpsPluginsDir"
}
tasks.getByPath(':build:com.mbeddr:install').dependsOn install_nativelibs_loader
*/

task build_platform(type: BuildLanguages, dependsOn: copy_allScripts) {
    script scriptFile('com.mbeddr.platform/build.xml')
}

task install_actionsfilter(type: Copy, dependsOn: build_platform) {
    from "$rootDir/artifacts/com.mbeddr.platform/"
    include "com.mbeddr.mpsutil.actionsfilter/"
    into "$mpsPluginsDir"
}
tasks.getByPath(':build:com.mbeddr:install').dependsOn install_actionsfilter

task test_mbeddr_platform(type: TestLanguages, dependsOn: build_platform) {
    script script_test_mbeddrPlatform
    description "execute typesystem and generator tests for the plaform"
}

task build_platform_distribution(type: BuildLanguages, dependsOn: [build_platform, test_mbeddr_platform]) {
    script scriptFile('com.mbeddr.platform/build-distribution.xml')

    // Support incremental build
    inputs.file(script)
    inputs.dir("$rootDir/artifacts/mps-sl-all")
    inputs.dir("$rootDir/artifacts/com.mbeddr.platform")
    outputs.dir("$rootDir/artifacts/com.mbeddr.platform.distribution")
}

task publish_mbeddrPlatform(type: Zip, dependsOn: test_mbeddr_platform) {
    archiveName 'com.mbeddr.platform.zip'
    from artifactsDir
    include "com.mbeddr.platform/**"
}

task defaultWrapper(dependsOn: build_platform) {
    doFirst {
        println "####################################################################################"
        println "#                      THE DEFAULT TASK HAS BEEN CHANGED                           #"
        println "#                                                                                  #"
        println "# The default task now only builds the mbeddr platform and no longer all of mbeddr #"
        println "# including the C part. In order to build everything you will have to invoke the   #"
        println "# task build_mbeddr. This will give you the old behaviour of building everything.  #"
        println "####################################################################################"
    }

}

rootProject.defaultTasks 'defaultWrapper'

task publishMbeddrPlatformToLocal(dependsOn: ['publishMbeddrAllScriptsPublicationToMavenLocal', 'publishMbeddrPlatformPublicationToMavenLocal'])

publishing {
    publications {
        mbeddrPlatform(MavenPublication) {
            groupId 'com.mbeddr'
            artifactId 'platform'
            version mbeddrPlatformBuildNumber
            artifact publish_mbeddrPlatform
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                configurations.mps.resolvedConfiguration.firstLevelModuleDependencies.each{
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.moduleGroup)
                    dependencyNode.appendNode('artifactId', it.moduleName)
                    dependencyNode.appendNode('version', it.moduleVersion)
                    dependencyNode.appendNode('type', it.moduleArtifacts[0].type)
                    dependencyNode.appendNode('scope', 'provided')
                }
                /*configurations.mpsExtensions.resolvedConfiguration.firstLevelModuleDependencies.each{
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.moduleGroup)
                    dependencyNode.appendNode('artifactId', it.moduleName)
                    dependencyNode.appendNode('version', it.moduleVersion)
                    dependencyNode.appendNode('type', it.moduleArtifacts[0].type)
                }*/
            }
            pom additionalPomInfo
        }
        mbeddrAllScripts(MavenPublication) {
            groupId 'com.mbeddr'
            artifactId 'allScripts'
            version mbeddrPlatformBuildNumber
            artifact publish_allScripts
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                configurations.mps.resolvedConfiguration.firstLevelModuleDependencies.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.moduleGroup)
                    dependencyNode.appendNode('artifactId', it.moduleName)
                    dependencyNode.appendNode('version', it.moduleVersion)
                    dependencyNode.appendNode('type', it.moduleArtifacts[0].type)
                    dependencyNode.appendNode('scope', 'provided')
                }
            }
            pom additionalPomInfo
        }
    }
}

//mbeddr build is "master" also for maintenance branches
//using the closure to delay evaluate from configuration to execution phase is important because the
//mbeddrBuild property is created by a "subproject" block which is executed after this script is configured.
//if no closure is used the build script won't compile.
if({project.mbeddrBuild}() == "master") {
    /* this is pretty much a workaround so we don't need to change anything in Teamcity. Teamcity calls the  publishMbeddrPlatformPublicationToMavenRepository
       tasks but since we have a new publishing target we would need to change the teamcity config to also include publishMbeddrPlatformPublicationToGitHubPackagesRepository
       If we change the Teamcity configuration this would break older maintenance and feature branches and we would loose the ablilty to
       rebuild the exact same source code. There for this workaround is present that adds a dependency between the itemis maven repo
       and github packages when we are on master or a maintenance branch.
       */
    tasks.findByName("publishMbeddrPlatformPublicationToMavenRepository").dependsOn("publishMbeddrPlatformPublicationToGitHubPackagesRepository")
}
