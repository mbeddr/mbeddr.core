import de.itemis.mps.gradle.GitBasedVersioning

buildscript {
    repositories {
        mavenLocal()
        maven { url 'https://artifacts.itemis.cloud/repository/maven-mps/' }
        mavenCentral()
    }

    dependencies {
        classpath 'de.itemis.mps:mps-gradle-plugin:1.2.177.46341c0'
    }
}

ext.defaultSnapshotRepository = 'https://artifacts.itemis.cloud/repository/maven-mps-snapshots/'
ext.defaultReleaseRepository = 'https://artifacts.itemis.cloud/repository/maven-mps-releases/'

//MPS-extensions version
ext.mpsExtensionsVersion = findNonEmptyProperty('mpsExtensionsVersion') ?: "2020.3.+"

//MPS version
ext.mpsMajor = "2020.3"
ext.mpsBuild = "2020.3.6"

ext.artifactsDir = new File(rootDir, 'artifacts')

ext.ciBuild = findNonEmptyProperty("forceCI") ?: !hasNonEmptyProperty('mpsHomeDir') && project.hasProperty("teamcity")

def jdk_home

if (ext.has('java11_home')) {
    jdk_home = ext.get('java11_home')
} else if (System.getenv('JB_JAVA11_HOME') != null) {
    jdk_home = System.getenv('JB_JAVA11_HOME')
} else {
    def expected = JavaVersion.VERSION_11
    if (JavaVersion.current() != expected) {
        throw new GradleException("This build script requires Java 11 but you are currently using ${JavaVersion.current()}.\nWhat you can do:\n"
            + "  * Use project property java11_home to point to the Java 11 JDK.\n"
            + "  * Use environment variable JB_JAVA11_HOME to point to the Java 11 JDK\n"
            + "  * Run Gradle using Java 11")
    }
    jdk_home = System.getProperty('java.home')
}

// Check JDK location
if (!new File(jdk_home, "lib").exists()) {
    throw new GradleException("Unable to locate JDK home folder. Detected folder is: $jdk_home")
}

logger.info 'Using JDK at {}', jdk_home

def hasNonEmptyProperty(property) {
    return project.hasProperty(property) && !project.getProperty(property).empty
}

def findNonEmptyProperty(property) {
    if (hasNonEmptyProperty(property)) {
        return project.getProperty(property)
    }
    return null
}

subprojects {
    // required plugins
    apply plugin: "base"
    apply plugin: "maven-publish"
    ext.mbeddrMajor = mpsMajor.replaceFirst(/(\d{4})\.(\d)/) { all, major, minor -> major }
    ext.mbeddrMinor = mpsMajor.replaceFirst(/(\d{4})\.(\d)/) { all, major, minor -> minor }

    // switch to snapshot/release repositories passed with -P option via command line, if any,
    // or use default snapshot/release repositories otherwise
    ext.snapshotRepository = findNonEmptyProperty('snapshotRepository') ?: defaultSnapshotRepository
    ext.releaseRepository = findNonEmptyProperty('releaseRepository') ?: defaultReleaseRepository
    ext.jdk_home = jdk_home
    ext["itemis.mps.gradle.ant.defaultJavaExecutable"] = new File(jdk_home, 'bin/java')

    // use depencency repositories passed as comma-separated list with -P option via command line, if any,
    // or use default snapshot/release repositories otherwise
    if (project.hasNonEmptyProperty('dependencyRepositories')) {
        if (project.getProperty('dependencyRepositories') instanceof String) {
            ext.dependencyRepositories = project.getProperty('dependencyRepositories').split(',') as Set
        }
    } else {
        ext.dependencyRepositories = ['https://artifacts.itemis.cloud/repository/maven-mps/']
    }

    if (project.hasProperty("mbeddrVersion")) {
        ext.mbeddrBuildNumber = project.getProperty('mbeddrVersion')
    } else {
        // setting mbeddrBuild
        if (project.hasProperty('mbeddrBuild')) {
            ext.mbeddrBuild = project.getProperty('mbeddrBuild')
        } else {
            ext.mbeddrBuild = GitBasedVersioning.getGitBranch()
        }
        if(mbeddrBuild == "stable" || mbeddrBuild.startsWith("maintenance-")) {
            ext.mbeddrBuild = "master"
        }

        // locally versions are SNAPSHOT
        if (ciBuild) {
            // setting mbeddrMajor
            if (project.hasProperty('mbeddrMajor')) {
                ext.mbeddrMajor = project.getProperty('mbeddrMajor')
            }

            // setting mbeddrMinor
            if (project.hasProperty('mbeddrMinor')) {
                ext.mbeddrMinor = project.getProperty('mbeddrMinor')
            }

            if (project.hasProperty("mbeddrBuildCounter")) {
                ext.mbeddrBuildCounter = project.getProperty("mbeddrBuildCounter")
            } else {
                ext.mbeddrBuildCounter = GitBasedVersioning.getGitCommitCount()
            }

            ext.mbeddrBuildNumber = GitBasedVersioning.getVersion(mbeddrBuild, mbeddrMajor, mbeddrMinor, mbeddrBuildCounter as int)
        } else {
            ext.mbeddrBuildNumber = "${ext.mbeddrMajor}.${ext.mbeddrMinor}-SNAPSHOT"
        }

        // Enable mbeddr to be assigned a different version number than mbeddr platform,
        // as well as mbeddr to be built against a specified existing mbeddr platform version
        ext.mbeddrPlatformBuildNumber = findNonEmptyProperty('mbeddrPlatformVersion') ?: mbeddrBuildNumber

        if (ciBuild) {
            // Coerce TeamCity build number to mbeddrBuildNumber by default
            // (see https://octopus.com/blog/teamcity-version-numbers-based-on-branches for details)
            println "##teamcity[buildNumber '${mbeddrBuildNumber}']"
        } else {
            println "Local build detected. mbeddr version $ext.mbeddrBuildNumber, mbeddr platform version $ext.mbeddrPlatformBuildNumber"
        }
    }
}
