import de.itemis.mps.gradle.GitBasedVersioning


plugins {
    id 'de.itemis.mps.gradle.common' version '1.29.+'
}

//MPS version
ext.mpsMajor = "9999.9"
ext.mpsBuild = "252.18003.35"

//MPS-extensions version
ext.mpsExtensionsVersion = "9999.9.3272.46914d6-SNAPSHOT"

ext.artifactsDir = new File(rootDir, 'artifacts')

ext.ciBuild = project.hasProperty("forceCI") || project.hasProperty("teamcity")

def hasNonEmptyProperty(property) {
    return project.hasProperty(property) && !project.getProperty(property).empty
}

def findNonEmptyProperty(property) {
    if (hasNonEmptyProperty(property)) {
        return project.getProperty(property)
    }
    return null
}

ext.additionalPomInfo = {
    licenses {
        // official SPDX identifier
        // see https://spdx.org/licenses/ for list
        license {
            name = "EPL-2.0"
            url = "https://www.eclipse.org/legal/epl-v20.html"
            comments = "Eclipse Public License - v 2.0"
            distribution = "repo"
        }
    }
    organization {
        name = "itemis AG"
        url = "https://www.itemis.com"
    }
    scm {
        tag = GitBasedVersioning.getGitCommitHash()
        url = "https://github.com/mbeddr/mbeddr.core.git"
    }
}

var isFirstSubproject = true

subprojects {
    ext.mbeddrMajor = mpsMajor.replaceFirst(/(\d{4})\.(\d)/) { all, major, minor -> major }
    ext.mbeddrMinor = mpsMajor.replaceFirst(/(\d{4})\.(\d)/) { all, major, minor -> minor }

    ext.mbeddrBuild = GitBasedVersioning.getGitBranch()
    if(mbeddrBuild == "stable" || mbeddrBuild.matches(/(maintenance|mps)[\/-](mps)?\d+(\.\d+)*/)) {
        ext.mbeddrBuild = "master"
    }
    if (ciBuild) {
        if (project.hasProperty("mbeddrBuildCounter")) {
            ext.mbeddrBuildCounter = project.getProperty("mbeddrBuildCounter")
        } else {
            ext.mbeddrBuildCounter = GitBasedVersioning.getGitCommitCount()
        }

        if(mbeddrBuild == "master" || mbeddrBuild.matches(/(maintenance|mps)[\/-](mps)?\d+(\.\d+)*/)) {
            ext.mbeddrBuildNumber = GitBasedVersioning.getVersion(mbeddrBuild, mbeddrMajor, mbeddrMinor, mbeddrBuildCounter as int)
        } else {
            // use same logic as in all other platforms for snapshot publications
            ext.mbeddrBuildNumber = GitBasedVersioning.getVersion(mbeddrBuild, mbeddrMajor, mbeddrMinor, mbeddrBuildCounter as int) + "-SNAPSHOT"
        }

    } else {
        ext.mbeddrBuildNumber = "${ext.mbeddrMajor}.${ext.mbeddrMinor}-SNAPSHOT"
        // TODO: not clear why this has been added - makes local builds from any branch to behave like a master build
        //ext.mbeddrBuild = "master"
    }

    // Enable mbeddr to be assigned a different version number than mbeddr platform,
    // as well as mbeddr to be built against a specified existing mbeddr platform version
    ext.mbeddrPlatformBuildNumber = findNonEmptyProperty('mbeddrPlatformVersion') ?: mbeddrBuildNumber

        if(isFirstSubproject) {
            if (ciBuild) {
            // Coerce TeamCity build number to mbeddrBuildNumber by default
            // (see https://octopus.com/blog/teamcity-version-numbers-based-on-branches for details)
            println "##teamcity[buildNumber '${mbeddrBuildNumber}']"
            } else {
                println "Local build detected. mbeddr version $ext.mbeddrBuildNumber, mbeddr platform version $ext.mbeddrPlatformBuildNumber"
            }
        }
        isFirstSubproject = false
}
