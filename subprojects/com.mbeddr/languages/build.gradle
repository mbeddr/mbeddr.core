import de.itemis.mps.gradle.*
import de.itemis.mps.gradle.tasks.MpsGenerate

plugins {
    id 'base'
    id 'maven-publish'
    id 'buildlogic.mps-conventions'
}

// :com.mbeddr.build
def script_build_mbeddr = new File(scriptsBasePath + "/com.mbeddr.build/" + "build.xml")

ant.taskdef(name: "makeTests",
        classname: "com.mbeddr.tools.ant.MakeTestsTask",
        classpath: file(rootProject.projectDir.absolutePath + "/tools/ant/tasks/TeamcityMakeTests.jar")
)

configurations {
    junitAnt
    mbeddrPlatform
}

def usePrebuiltPlatform = ciBuild && !project.hasProperty('forceBuildPlatform')

dependencies {
    junitAnt 'junit:junit:4.13.2'
    junitAnt('org.apache.ant:ant-junit:1.10.15') {
        transitive = false
    }
    junitAnt('org.apache.ant:ant-junit4:1.10.15') {
        transitive = false
    }

    def mbeddrPlatformDependency

    if (usePrebuiltPlatform) {
        // By default, on CI we don't build the platform but take it from Nexus, unless overridden by `-PforceBuildPlatform`.
        mbeddrPlatformDependency = "com.mbeddr:platform:$mbeddrPlatformBuildNumber"
    } else {
        mbeddrPlatformDependency = project(':com.mbeddr:platform')
    }

    mbeddrPlatform mbeddrPlatformDependency
}

task resolve_mbeddr_platform() {
    description 'Resolve the mbeddr platform artifact via the mbeddr platform configuration.'
    dependsOn(configurations.mbeddrPlatform)
    doLast {
        copy {
            from {
                    configurations.mbeddrPlatform.resolve().collect { zipTree(it) }
                 }
            into artifactsDir
        }
    }
}

tasks.register('build_allScripts', MpsGenerate) {
    description 'Generates the build script that contains all other build scripts.'
    javaLauncher = jbrToolchain.javaLauncher
    environmentKind = EnvironmentKind.MPS
    mpsHome = mpsHomeProvider

    projectLocation = rootProject.file('code/languages/com.mbeddr.build')

    pluginRoots.from(
            evaluationDependsOn(':com.mbeddr:platform')
                    .tasks.named('resolveMpsLibraries', Sync)
                    .map { it.destinationDir })
    pluginRoots.from(mpsHome.dir('plugins'))

    folderMacros.put('mbeddr.github.core.home', rootProject.layout.projectDirectory)

    // Note that MpsGenerate loads project libraries defined in the project (in this case com.mbeddr.build). In case we
    // are using a pre-built mbeddr platform, the project library dependency should, strictly speaking, be replaced with
    // the plugin/library dependency on the pre-built artifact. However, this is difficult to do and probably not worth
    // implementing just yet.
}

task copy_logConfig(type: Copy, dependsOn: 'build_allScripts') {
    description 'Copy the logging configuration to the MPS installation.'
    from "$rootDir/debug"
    into "$mpsHomeDir/bin"
}

ant.taskdef(name: 'junit', classname: 'org.apache.tools.ant.taskdefs.optional.junit.JUnitTask',
        classpath: configurations.junitAnt.asPath)
ant.taskdef(name: 'junitreport', classname: 'org.apache.tools.ant.taskdefs.optional.junit.XMLResultAggregator',
        classpath: configurations.junitAnt.asPath)

task build_mbeddr(type: BuildLanguages, dependsOn: ['build_allScripts', 'resolve_mbeddr_platform']) {
    description 'Build mbeddr itself.'
    script script_build_mbeddr
    outputs.dir("$artifactsDir/mbeddr")
}

def script_test_mbeddrTutorial = new File(scriptsBasePath + "/com.mbeddr.tutorial/" + "build-tests.xml")

def script_test_mbeddrPerformance = new File(scriptsBasePath + "/com.mbeddr.core/" + "build-performance-tests.xml")
def script_test_mbeddrCoreEx = new File(scriptsBasePath + "/com.mbeddr.core/" + "build-ex-tests.xml")
def script_test_mbeddrCoreExLibrary = new File(scriptsBasePath + "/com.mbeddr.core/" + "build-aLibrary.xml")
def script_test_mbeddrCoreTs = new File(scriptsBasePath + "/com.mbeddr.core/" + "build-ts-tests.xml")
def script_test_mbeddrCcTs = new File(scriptsBasePath + "/com.mbeddr.cc/" + "build-ts-tests.xml")
def script_test_mbeddrCcEx = new File(scriptsBasePath + "/com.mbeddr.cc/" + "build-ex-tests.xml")
def script_test_mbeddrExtTs = new File(scriptsBasePath + "/com.mbeddr.ext/" + "build-ts-tests.xml")
def script_test_mbeddrExtEx = new File(scriptsBasePath + "/com.mbeddr.ext/" + "build-ex-tests.xml")
def script_test_mbeddrXmodelEx = new File(scriptsBasePath + "/com.mbeddr.xmodel/" + "build-ex-tests.xml")


def script_build_tutorialLanguages = new File(scriptsBasePath + "/com.mbeddr.tutorial/" + "build-languages.xml")
def script_build_tutorialSolutions = new File(scriptsBasePath + "/com.mbeddr.tutorial/" + "build-solutions.xml")

task build_tutorial_languages(type: BuildLanguages, dependsOn: build_mbeddr) {
    script script_build_tutorialLanguages
    description 'Build the mbeddr tutorial languages.'
}

task build_tutorial_solutions(type: BuildLanguages, dependsOn: build_tutorial_languages) {
    script script_build_tutorialSolutions
    description 'Build the mbeddr tutorial solutions.'
}

task build_tutorial(dependsOn: build_tutorial_solutions) {
    description 'Build the mbeddr tutorial.'
 }


task test_mbeddr_tutorial(type: TestLanguages, dependsOn: build_tutorial) {
    script script_test_mbeddrTutorial
    description 'Test the mbeddr tutorial.'
}

task test_mbeddr_ext_ts(type: TestLanguages, dependsOn: build_mbeddr) {
    script script_test_mbeddrExtTs
    description 'Run the mbeddr typesystem tests.'
}

task test_mbeddr_performance(type: TestLanguages, dependsOn: build_mbeddr) {
    script script_test_mbeddrPerformance
    description 'Run the mbeddr performance tests.'
}

task build_mbeddr_core_ex(type: BuildLanguages, dependsOn: [build_mbeddr, copy_logConfig]) {
    script script_test_mbeddrCoreEx
    description 'Run the mbeddr core execution tests.'
}

tasks.register('generate_mbeddr_core_ts', RunAntScript) {
    script script_test_mbeddrCoreTs
    targets = ['generate']
}

task test_mbeddr_core_ts(type: TestLanguages, dependsOn: build_mbeddr) {
    dependsOn('generate_mbeddr_core_ts')
    script script_test_mbeddrCoreTs
    description 'Run the mbeddr core typesystem tests.'
    targets = ['check']
}

task test_mbeddr_core_ex {
    description 'Run the mbeddr core execution tests.'
	doLast {
		ant.makeTests(workingDirectory: rootProject.projectDir.absolutePath + "/code/languages/com.mbeddr.core")
	}
}

task test_mbeddr_core(dependsOn: [test_mbeddr_core_ex, test_mbeddr_core_ts]) {
    description 'Run all mbeddr core tests.'
}

task test_mbeddr_cc_ex {
    description 'Run the mbeddr cc execution tests.'
	doLast {
		ant.makeTests(workingDirectory: rootProject.projectDir.absolutePath + "/code/languages/com.mbeddr.cc")
	}
}

task build_mbeddr_cc_ex(type: RunAntScript, dependsOn: build_mbeddr) {
    script script_test_mbeddrCcEx
    description 'Build the mbeddr cc execution tests.'
    targets 'clean', 'generate'
}

task test_mbeddr_cc_ts(type: TestLanguages, dependsOn: build_mbeddr) {
    script script_test_mbeddrCcTs
    description 'Run the mbeddr cc typesystem tests.'
}

task test_mbeddr_cc(dependsOn: [build_mbeddr_cc_ex, test_mbeddr_cc_ex, test_mbeddr_cc_ts]) {
    description 'Run all mbeddr cc tests.'
}

task build_mbeddr_ext_ex(type: BuildLanguages, dependsOn: build_mbeddr) {
    script script_test_mbeddrExtEx
    description 'Build all mbeddr C extension execution tests.'
}

task build_mbeddr_xmodel_ex(type: BuildLanguages, dependsOn: build_mbeddr) {
    script script_test_mbeddrXmodelEx
    description 'Build all mbeddr crossmodel generation execution tests.'
}

task test_mbeddr_ext_ex {
	doLast {
		ant.makeTests(workingDirectory: rootProject.projectDir.absolutePath + "/code/languages/com.mbeddr.ext")
	}
    description 'Run all mbeddr mbeddr crossmodel generation execution tests.'
}

task test_mbeddr_ext(dependsOn: [build_mbeddr_ext_ex, test_mbeddr_ext_ex, test_mbeddr_ext_ts]) {
    description 'Run all mbeddr C extension tests.'
}

task test_mbeddr_xmodel(dependsOn: []) {
    description 'Run all mbeddr crossmodel generation tests.'
}

task test_mbeddr(dependsOn: [test_mbeddr_core, test_mbeddr_performance, test_mbeddr_cc, test_mbeddr_ext, test_mbeddr_xmodel]) {
    description 'Run all tests in mbeddr.'
}

tasks.register('test') {
    dependsOn(test_mbeddr)
    description 'Run all tests.'
}

tasks.named('check') {
    dependsOn 'test'
    description 'Check the full project.'
}

task package_mbeddr(type: Zip, dependsOn: build_mbeddr) {
    archiveFileName = 'com.mbeddr.zip'
    from artifactsDir
    include "mbeddr/**"
    description 'Package mbeddr into a zip file.'
}

artifacts {
    'default'(package_mbeddr)
}

publishing {
    publications {
        mbeddr(MavenPublication) {
            groupId 'com.mbeddr'
            artifactId 'mbeddr'
            version mbeddrBuildNumber
            artifact(package_mbeddr) {}
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                if (usePrebuiltPlatform) {
                    configurations.mbeddrPlatform.resolvedConfiguration.firstLevelModuleDependencies.each {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.moduleGroup)
                        dependencyNode.appendNode('artifactId', it.moduleName)
                        dependencyNode.appendNode('version', it.moduleVersion)
                        dependencyNode.appendNode('type', it.moduleArtifacts[0].type)
                    }
                } else {
                    configurations.mbeddrPlatform.allDependencies.each {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                        dependencyNode.appendNode('type', 'zip')
                    }
                }
            }
            pom additionalPomInfo
        }
    }
}

tasks.register('generate_mbeddr_languages') {
    description = 'Generate all mbeddr languages in order to run migrations'
    dependsOn('build_mbeddr', 'generate_mbeddr_core_ts')
}

task publishMbeddrToLocal (dependsOn: ['publishMbeddrPublicationToMavenLocal',
':com.mbeddr:platform:publishMbeddrPlatformToLocal']) {
    description 'Publish mbeddr to the local maven repository.'
}

//mbeddr build is "master" also for maintenance branches
//using the closure to delay evaluate from configuration to execution phase is important because the
//mbeddrBuild property is created by a "subproject" block which is executed after this script is configured.
//if no closure is used the build script won't compile.
if({project.mbeddrBuild}() == "master") {
    /* this is pretty much a workaround so we don't need to change anything in Teamcity. Teamcity calls the  publishMbeddrPlatformPublicationToMavenRepository
       tasks but since we have a new publishing target we would need to change the teamcity config to also include publishMbeddrPlatformPublicationToGitHubPackagesRepository
       If we change the Teamcity configuration this would break older maintenance and feature branches and we would loose the ablilty to
       rebuild the exact same source code. There for this workaround is present that adds a dependency between the itemis maven repo
       and github packages when we are on master or a maintenance branch.
       */
    tasks.findByName("publishMbeddrPublicationToMavenRepository").dependsOn("publishMbeddrPublicationToGitHubPackagesRepository")
}
