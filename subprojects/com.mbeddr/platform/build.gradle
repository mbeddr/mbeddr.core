plugins {
    id 'base'
    id 'maven-publish'
    id 'buildlogic.mps-conventions'
}

import de.itemis.mps.gradle.*
import de.itemis.mps.gradle.tasks.MpsGenerate

def script_test_mbeddrPlatform = new File(scriptsBasePath, "com.mbeddr.platform/build-ts-tests.xml")
def script_mbeddrPlatform_sandboxes = new File(scriptsBasePath, "com.mbeddr.platform/build-sandboxes.xml")

/**
 * The MPS home directory as a property, for use in tasks supporting lazy configuration. The property carries along
 * the dependency information (i.e. tasks necessary to produce the directory, if any).
 */
DirectoryProperty mpsHomeProvider = objects.directoryProperty()

if (!project.skipresolve_mps) {
    def resolveMps = tasks.register('resolveMps', Sync) {
        from configurations.mps.elements.map { it.collect(project.&zipTree) }
        into mpsHomeDir
    }
    mpsHomeProvider.fileProvider(resolveMps.map { it.destinationDir })
} else {
    mpsHomeProvider.fileValue(rootProject.file(mpsHomeDir))
}

configurations {
    mps { canBeConsumed = false }
    mpsLibraries { canBeConsumed = false }
}

dependencies {
    mps "com.jetbrains:mps:$mpsBuild"

    if (project.hasProperty('mpsExtensionsZip')) {
        mpsLibraries files(project.property('mpsExtensionsZip'))
    } else {
        mpsLibraries "de.itemis.mps:extensions:$mpsExtensionsVersion"
    }
}

tasks.register('resolveMpsLibraries', Sync) {
    from configurations.mpsLibraries.elements.map { it.collect(project.&zipTree) }
    into rootProject.layout.buildDirectory.dir('dependencies')
}

tasks.register('build_allScripts', MpsGenerate) {
    javaLauncher = jbrToolchain.javaLauncher
    environmentKind = EnvironmentKind.MPS
    mpsHome = mpsHomeProvider

    projectLocation = rootProject.file('code/languages/com.mbeddr.build')
    pluginRoots.from(tasks.named('resolveMpsLibraries', Sync).map { it.destinationDir })
    pluginRoots.from(mpsHome.dir('plugins'))

    folderMacros.put('mbeddr.github.core.home', rootProject.layout.projectDirectory)
}

task build_actionsfilter(type: BuildLanguages, dependsOn: ['build_allScripts']) {
    script scriptFile('com.mbeddr.platform/actionsfilter.xml')
    // see comment in build_allScripts, above, for reasons we need to explicitly state task output
    // to address NO-SOURCE failure for package_mbeddrPlatform
    outputs.dir(new File(artifactsDir, 'com.mbeddr.mpsutil.actionsfilter/'))
    outputs.upToDateWhen { false }
}

task build_platform(type: BuildLanguages, dependsOn: ['build_allScripts', build_actionsfilter]) {
    script scriptFile('com.mbeddr.platform/build.xml')
    outputs.dir(new File(artifactsDir, 'com.mbeddr.platform/'))
    outputs.upToDateWhen { false }
}

task install_actionsfilter(type: Copy, dependsOn: build_actionsfilter) {
    from "$rootDir/artifacts/com.mbeddr.mpsutil.actionsfilter/"
    include "com.mbeddr.mpsutil.actionsfilter/"
    into "$mpsPluginsDir"
}
tasks.getByPath(':com.mbeddr:install').dependsOn install_actionsfilter

tasks.register('generate_mbeddr_platform_tests', RunAntScript) {
    dependsOn build_platform
    script script_test_mbeddrPlatform
    description "build mbeddr platform tests"
    targets 'generate'
}

tasks.register('generate_platform_sandboxes', RunAntScript) {
    dependsOn build_platform
    script script_mbeddrPlatform_sandboxes
    description "build mbeddr platform sandboxes"
    targets 'generate'
}

tasks.register('generate_platform_languages') {
    dependsOn build_platform, generate_mbeddr_platform_tests, generate_platform_sandboxes
}

task test_mbeddr_platform(type: TestLanguages, dependsOn: [build_platform, generate_mbeddr_platform_tests]) {
    script script_test_mbeddrPlatform
    description "execute typesystem and generator tests for the plaform"
    targets 'check'
}

tasks.register('test') {
    dependsOn(test_mbeddr_platform)
}

tasks.named('check') {
    dependsOn('test')
}

task build_platform_distribution(type: BuildLanguages, dependsOn: [build_platform, test_mbeddr_platform]) {
    script scriptFile('com.mbeddr.platform/build-distribution.xml')
}

task package_mbeddrPlatform(type: Zip, dependsOn: build_platform) {
    archiveFileName = 'com.mbeddr.platform.zip'
    from artifactsDir
    include "com.mbeddr.platform/**"
}

artifacts {
    'default'(package_mbeddrPlatform)
}


task defaultWrapper(dependsOn: build_platform) {
    doFirst {
        println "####################################################################################"
        println "#                      THE DEFAULT TASK HAS BEEN CHANGED                           #"
        println "#                                                                                  #"
        println "# The default task now only builds the mbeddr platform and no longer all of mbeddr #"
        println "# including the C part. In order to build everything you will have to invoke the   #"
        println "# task build_mbeddr. This will give you the old behaviour of building everything.  #"
        println "####################################################################################"
    }

}

rootProject.defaultTasks 'defaultWrapper'

task publishMbeddrPlatformToLocal(dependsOn: ['publishMbeddrPlatformPublicationToMavenLocal'])

publishing {
    publications {
        mbeddrPlatform(MavenPublication) {
            groupId 'com.mbeddr'
            artifactId 'platform'
            version mbeddrPlatformBuildNumber
            artifact package_mbeddrPlatform
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                if (!project.skipresolve_mps) {
                    configurations.mps.resolvedConfiguration.firstLevelModuleDependencies.each{
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.moduleGroup)
                        dependencyNode.appendNode('artifactId', it.moduleName)
                        dependencyNode.appendNode('version', it.moduleVersion)
                        dependencyNode.appendNode('type', it.moduleArtifacts[0].type)
                        dependencyNode.appendNode('scope', 'provided')
                    }
                }
                /*configurations.mpsExtensions.resolvedConfiguration.firstLevelModuleDependencies.each{
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.moduleGroup)
                    dependencyNode.appendNode('artifactId', it.moduleName)
                    dependencyNode.appendNode('version', it.moduleVersion)
                    dependencyNode.appendNode('type', it.moduleArtifacts[0].type)
                }*/
            }
            pom additionalPomInfo
        }
    }
}

//mbeddr build is "master" also for maintenance branches
//using the closure to delay evaluate from configuration to execution phase is important because the
//mbeddrBuild property is created by a "subproject" block which is executed after this script is configured.
//if no closure is used the build script won't compile.
if({project.mbeddrBuild}() == "master") {
    /* this is pretty much a workaround so we don't need to change anything in Teamcity. Teamcity calls the  publishMbeddrPlatformPublicationToMavenRepository
       tasks but since we have a new publishing target we would need to change the teamcity config to also include publishMbeddrPlatformPublicationToGitHubPackagesRepository
       If we change the Teamcity configuration this would break older maintenance and feature branches and we would loose the ablilty to
       rebuild the exact same source code. There for this workaround is present that adds a dependency between the itemis maven repo
       and github packages when we are on master or a maintenance branch.
       */
    tasks.findByName("publishMbeddrPlatformPublicationToMavenRepository").dependsOn("publishMbeddrPlatformPublicationToGitHubPackagesRepository")
}
