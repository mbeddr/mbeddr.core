<?xml version="1.0" encoding="UTF-8"?>
<model ref="r:38897e08-83fd-42c7-91d3-65b102721940(com.mbeddr.tutorial.documentation.ug.cextensions)" content="root">
  <persistence version="9" />
  <imports>
    <import index="ntnz" ref="r:7f372397-146b-40d5-9f20-607974c4fed4(com.mbeddr.tutorial.documentation.ug._main)" implicit="true" />
    <import index="x27k" ref="r:75ecab8a-8931-4140-afc6-4b46398710fc(com.mbeddr.core.modules.structure)" implicit="true" />
    <import index="e1tx" ref="r:bd5ec23c-c294-47cc-a078-675c03abdb69(mbeddr.tutorial.main.defaultExtensions)" implicit="true" />
    <import index="clqz" ref="r:5ebcdb77-81e9-4964-beae-35bd9a2f28b5(com.mbeddr.ext.statemachines.structure)" implicit="true" />
    <import index="us0v" ref="r:22b9d29d-483d-4f08-8d1b-4e6567157caf(com.mbeddr.tutorial.documentation.ug.analyses)" implicit="true" />
    <import index="zxcx" ref="r:af51c5c3-b54b-4a75-a1e6-409757d1a380(com.mbeddr.tutorial.documentation.code)" implicit="true" />
  </imports>
  <registry>
    <language id="92d2ea16-5a42-4fdf-a676-c7604efe3504" name="de.slisson.mps.richtext">
      <concept id="2557074442922380897" name="de.slisson.mps.richtext.structure.Text" flags="ng" index="19SGf9">
        <child id="2557074442922392302" name="words" index="19SJt6" />
      </concept>
      <concept id="2557074442922438156" name="de.slisson.mps.richtext.structure.Word" flags="ng" index="19SUe$">
        <property id="2557074442922438158" name="escapedValue" index="19SUeA" />
      </concept>
    </language>
    <language id="2374bc90-7e37-41f1-a9c4-c2e35194c36a" name="com.mbeddr.doc">
      <concept id="4317007310193476045" name="com.mbeddr.doc.structure.ScaleDownNotUp100" flags="ng" index="2bctqb" />
      <concept id="6165313375055797476" name="com.mbeddr.doc.structure.FormattedText" flags="ng" index="$DsGX">
        <child id="6165313375055797477" name="text" index="$DsGW" />
      </concept>
      <concept id="2179458690439382890" name="com.mbeddr.doc.structure.ConceptModelContentRemoval" flags="ng" index="2Cuv_b">
        <reference id="2179458690439403347" name="conceptDecl" index="2Cuq_M" />
      </concept>
      <concept id="6657644269295214799" name="com.mbeddr.doc.structure.IDocumentLike" flags="ng" index="G9hjZ">
        <reference id="6657644269295214800" name="config" index="G9hjw" />
        <child id="126932837435370865" name="authors" index="Wq1Bf" />
        <child id="8730648445433290694" name="dependsOn" index="1DXQ57" />
      </concept>
      <concept id="2286331641395252232" name="com.mbeddr.doc.structure.NamedNodeModelContentPointerElement" flags="ng" index="2NCMab">
        <reference id="2286331641395252233" name="node" index="2NCMaa" />
      </concept>
      <concept id="2286331641395238583" name="com.mbeddr.doc.structure.ModelContentPointer" flags="ng" index="2NCZwO">
        <child id="2286331641395252236" name="elements" index="2NCMaf" />
      </concept>
      <concept id="2286331641392318852" name="com.mbeddr.doc.structure.MenuFormattedText" flags="ng" index="2OlAs7" />
      <concept id="6386504476136263187" name="com.mbeddr.doc.structure.ImageParagraph" flags="ng" index="2SaynC">
        <property id="6386504476136358630" name="showImage" index="2Sbq$t" />
        <property id="8730648445434174368" name="center" index="1DKIkx" />
        <child id="6386504476136278696" name="description" index="2SaI5j" />
        <child id="6386504476136531838" name="resource" index="2SbwM5" />
        <child id="8624890525767908695" name="sizeSpec" index="3SHJ_F" />
      </concept>
      <concept id="6386504476136420159" name="com.mbeddr.doc.structure.ImgRefWord" flags="ng" index="2Sbdz4">
        <reference id="6386504476136420174" name="image" index="2SbdyP" />
      </concept>
      <concept id="6386504476136521407" name="com.mbeddr.doc.structure.Resource" flags="ng" index="2Sb_l4">
        <property id="6386504476136521408" name="fileName" index="2Sb_kV" />
        <reference id="6386504476136521409" name="path" index="2Sb_kU" />
      </concept>
      <concept id="126932837435370850" name="com.mbeddr.doc.structure.Author" flags="ng" index="Wq1Bs">
        <property id="126932837435370852" name="email" index="Wq1Bq" />
        <property id="126932837435370851" name="name" index="Wq1Bt" />
      </concept>
      <concept id="4457500422381571986" name="com.mbeddr.doc.structure.CodeFormattedText" flags="ng" index="1jUjqm" />
      <concept id="6955693250238922820" name="com.mbeddr.doc.structure.AbstractModelContentParagraph" flags="ng" index="3z_lpG">
        <property id="6955693250238922824" name="removeEmpties" index="3z_lpw" />
        <property id="6955693250238922823" name="showContents" index="3z_lpJ" />
        <child id="6955693250238922821" name="removals" index="3z_lpH" />
        <child id="6955693250238922822" name="codeptr" index="3z_lpI" />
      </concept>
      <concept id="6955693250238922840" name="com.mbeddr.doc.structure.NodeModelContentRemoval" flags="ng" index="3z_lpK">
        <reference id="6955693250238922841" name="removedNode" index="3z_lpL" />
      </concept>
      <concept id="6955693250238922834" name="com.mbeddr.doc.structure.ModelContentAsTextParagraph" flags="ng" index="3z_lpU">
        <property id="6955693250238922835" name="text" index="3z_lpV" />
        <property id="6955693250238922836" name="language" index="3z_lpW" />
      </concept>
      <concept id="6955693250238922838" name="com.mbeddr.doc.structure.ModelContentRefWord" flags="ng" index="3z_lpY">
        <child id="6955693250238922839" name="modelContentPtr" index="3z_lpZ" />
      </concept>
      <concept id="3350625596580225385" name="com.mbeddr.doc.structure.DocumentRef" flags="ng" index="1_0j5j">
        <reference id="3350625596580225386" name="doc" index="1_0j5g" />
      </concept>
      <concept id="3350625596580108709" name="com.mbeddr.doc.structure.SectRefWord" flags="ng" index="1_0GAv">
        <reference id="3350625596580108719" name="target" index="1_0GAl" />
      </concept>
      <concept id="3350625596580089586" name="com.mbeddr.doc.structure.TextParagraph" flags="ng" index="1_0LV8">
        <child id="3350625596580089613" name="text" index="1_0LWR" />
      </concept>
      <concept id="3350625596580064249" name="com.mbeddr.doc.structure.IDocContentContainer" flags="ng" index="1_0VJ3">
        <child id="3350625596580064250" name="contents" index="1_0VJ0" />
      </concept>
      <concept id="3350625596580064222" name="com.mbeddr.doc.structure.AbstractSection" flags="ng" index="1_0VJ$">
        <property id="3350625596580064225" name="text" index="1_0VJr" />
      </concept>
      <concept id="3350625596580064455" name="com.mbeddr.doc.structure.Section" flags="ng" index="1_0VNX" />
      <concept id="3350625596579911728" name="com.mbeddr.doc.structure.Document" flags="ng" index="1_1swa">
        <property id="5572730672710143343" name="chapterStartIndex" index="yApLE" />
      </concept>
      <concept id="8624890525767637976" name="com.mbeddr.doc.structure.PageWidthSizeSpec" flags="ng" index="3SGHZ$">
        <property id="8624890525767637977" name="percentage" index="3SGHZ_" />
      </concept>
      <concept id="5378658552262903588" name="com.mbeddr.doc.structure.Item" flags="ng" index="3X6T9g">
        <child id="5378658552262903589" name="text" index="3X6T9h" />
      </concept>
      <concept id="5378658552262893169" name="com.mbeddr.doc.structure.ItemList" flags="ng" index="3X6WG5">
        <child id="5378658552262986137" name="items" index="3Xp5NH" />
      </concept>
    </language>
    <language id="d4280a54-f6df-4383-aa41-d1b2bffa7eb1" name="com.mbeddr.core.base">
      <concept id="8375407818529178006" name="com.mbeddr.core.base.structure.TextBlock" flags="ng" index="OjmMv">
        <child id="8375407818529178007" name="text" index="OjmMu" />
      </concept>
    </language>
    <language id="ceab5195-25ea-4f22-9b92-103b95ca8c0c" name="jetbrains.mps.lang.core">
      <concept id="1169194658468" name="jetbrains.mps.lang.core.structure.INamedConcept" flags="ng" index="TrEIO">
        <property id="1169194664001" name="name" index="TrG5h" />
      </concept>
    </language>
  </registry>
  <node concept="1_1swa" id="300OR6GmKCv">
    <property role="TrG5h" value="E_StateMachines" />
    <property role="yApLE" value="9" />
    <ref role="G9hjw" to="ntnz:2fBMM_3XZ4C" resolve="Config" />
    <node concept="Wq1Bs" id="5lWB_7x$8ez" role="Wq1Bf">
      <property role="Wq1Bt" value="Tamas Szabo" />
      <property role="Wq1Bq" value="tamas.szabo@itemis.de" />
    </node>
    <node concept="1_0VNX" id="3mn43GO8dMb" role="1_0VJ0">
      <property role="TrG5h" value="statemachines" />
      <property role="1_0VJr" value="State Machines" />
      <node concept="1_0LV8" id="300OR6Gn5A_" role="1_0VJ0">
        <node concept="19SGf9" id="300OR6Gn5AA" role="1_0LWR">
          <node concept="19SUe$" id="300OR6Gn5AB" role="19SJt6">
            <property role="19SUeA" value="Next to components and units, state machines are one of the main C extensions available in mbeddr. They can be used directly in C programs, or alternatively, embedded into components. To keep the overall complexity of the example manageable, we will show how state machines can be used directly in C. \n\nState machines can either be viewed and edited with the textual notation or with the table based projection. You can switch between the two modes with the " />
          </node>
          <node concept="2OlAs7" id="yaVrOuw0Q4" role="19SJt6">
            <node concept="19SGf9" id="yaVrOuw0Q7" role="$DsGW">
              <node concept="19SUe$" id="yaVrOuw0Q8" role="19SJt6">
                <property role="19SUeA" value="Code -&gt; Projection Mode -&gt; Statemachines as Tables" />
              </node>
            </node>
          </node>
          <node concept="19SUe$" id="1VdI9nUFYf_" role="19SJt6">
            <property role="19SUeA" value=" option. \n\nThis section will give a brief overview on state machines; how they can be defined, how one could interact with C code when using the state machines and we will also give details about hierarchical state machines and their visualizations with the help of the PlantUML tool. " />
          </node>
        </node>
      </node>
      <node concept="1_0VNX" id="300OR6Gn5AK" role="1_0VJ0">
        <property role="TrG5h" value="implementingStateMachine" />
        <property role="1_0VJr" value="Implementing a State machine" />
        <node concept="1_0LV8" id="300OR6Gn8Km" role="1_0VJ0">
          <node concept="19SGf9" id="300OR6Gn8Kn" role="1_0LWR">
            <node concept="19SUe$" id="300OR6Gn8Ko" role="19SJt6">
              <property role="19SUeA" value="Import the " />
            </node>
            <node concept="1jUjqm" id="2XVA19iKVE0" role="19SJt6">
              <node concept="19SGf9" id="2XVA19iKVE1" role="$DsGW">
                <node concept="19SUe$" id="2XVA19iKVE2" role="19SJt6">
                  <property role="19SUeA" value="com.mbeddr.statemachines" />
                </node>
              </node>
            </node>
            <node concept="19SUe$" id="2XVA19iKVDZ" role="19SJt6">
              <property role="19SUeA" value=" devkit into your model and create a new " />
            </node>
            <node concept="3z_lpY" id="2XVA19iL6j5" role="19SJt6">
              <node concept="2NCZwO" id="2XVA19iL8qp" role="3z_lpZ">
                <node concept="2NCMab" id="2XVA19iM_1s" role="2NCMaf">
                  <ref role="2NCMaa" to="x27k:5_l8w1EmTde" resolve="ImplementationModule" />
                </node>
              </node>
            </node>
            <node concept="19SUe$" id="2XVA19iL6j4" role="19SJt6">
              <property role="19SUeA" value=" (the example module is  called also " />
            </node>
            <node concept="3z_lpY" id="6lh$fzUNCi" role="19SJt6">
              <node concept="2NCZwO" id="6lh$fzUNCj" role="3z_lpZ">
                <node concept="2NCMab" id="6lh$fzUNI4" role="2NCMaf">
                  <ref role="2NCMaa" to="e1tx:4usdeMNVnYi" resolve="StateMachines" />
                </node>
              </node>
            </node>
            <node concept="19SUe$" id="6lh$fzUNCh" role="19SJt6">
              <property role="19SUeA" value=". Then you can create the state machine in this module and add the " />
            </node>
            <node concept="3z_lpY" id="2XVA19iM_Z5" role="19SJt6">
              <node concept="2NCZwO" id="2XVA19iM_ZZ" role="3z_lpZ">
                <node concept="2NCMab" id="2XVA19iMA05" role="2NCMaf">
                  <ref role="2NCMaa" to="x27k:5_l8w1EmTde" resolve="ImplementationModule" />
                </node>
              </node>
            </node>
            <node concept="19SUe$" id="2XVA19iM_Z4" role="19SJt6">
              <property role="19SUeA" value=" to the build configuration. This section will guide you through an example that creates a state machine for a flight judgement system. This system has 5 states which describe the behavior of the plane and also give the semantics for awarding the points for a given flight. We will create these states and see how they can be connected with transitions. We will also explore how one could specify guard conditions for the transitions. The informal rules for judging flights are as follows:" />
            </node>
          </node>
        </node>
        <node concept="3X6WG5" id="300OR6Gn8LK" role="1_0VJ0">
          <node concept="3X6T9g" id="300OR6Gn8M6" role="3Xp5NH">
            <node concept="OjmMv" id="300OR6Gn8M7" role="3X6T9h">
              <node concept="19SGf9" id="300OR6Gn8M8" role="OjmMu">
                <node concept="19SUe$" id="300OR6Gn8M9" role="19SJt6">
                  <property role="19SUeA" value="Once a flight lifts off, you get 100 points" />
                </node>
              </node>
            </node>
          </node>
          <node concept="3X6T9g" id="300OR6GnamY" role="3Xp5NH">
            <node concept="OjmMv" id="300OR6GnamZ" role="3X6T9h">
              <node concept="19SGf9" id="300OR6Gnan0" role="OjmMu">
                <node concept="19SUe$" id="300OR6Gnan1" role="19SJt6">
                  <property role="19SUeA" value="For each trackpoint where you go more than 100 mps, you get 10 points" />
                </node>
              </node>
            </node>
          </node>
          <node concept="3X6T9g" id="300OR6GnbVU" role="3Xp5NH">
            <node concept="OjmMv" id="300OR6GnbVV" role="3X6T9h">
              <node concept="19SGf9" id="300OR6GnbVW" role="OjmMu">
                <node concept="19SUe$" id="300OR6GnbVX" role="19SJt6">
                  <property role="19SUeA" value="For each trackpoint where you go more than 200 mps, you get 20 points" />
                </node>
              </node>
            </node>
          </node>
          <node concept="3X6T9g" id="300OR6GndwU" role="3Xp5NH">
            <node concept="OjmMv" id="300OR6GndwV" role="3X6T9h">
              <node concept="19SGf9" id="300OR6GndwW" role="OjmMu">
                <node concept="19SUe$" id="300OR6GndwX" role="19SJt6">
                  <property role="19SUeA" value="You should land as short as possible; for each trackpoint where you are on the ground, rolling, you get 1 point deducted." />
                </node>
              </node>
            </node>
          </node>
          <node concept="3X6T9g" id="300OR6Gnf5Y" role="3Xp5NH">
            <node concept="OjmMv" id="300OR6Gnf5Z" role="3X6T9h">
              <node concept="19SGf9" id="300OR6Gnf60" role="OjmMu">
                <node concept="19SUe$" id="300OR6Gnf61" role="19SJt6">
                  <property role="19SUeA" value="Once you land successfully, you get another 100 points." />
                </node>
              </node>
            </node>
          </node>
        </node>
        <node concept="1_0LV8" id="300OR6Gnhu8" role="1_0VJ0">
          <node concept="19SGf9" id="300OR6Gnhu9" role="1_0LWR">
            <node concept="19SUe$" id="300OR6Gnhua" role="19SJt6">
              <property role="19SUeA" value="In order to create the state machine in the " />
            </node>
            <node concept="3z_lpY" id="2XVA19iNfA6" role="19SJt6">
              <node concept="2NCZwO" id="2XVA19iNfAg" role="3z_lpZ">
                <node concept="2NCMab" id="2XVA19iNfAm" role="2NCMaf">
                  <ref role="2NCMaa" to="x27k:5_l8w1EmTde" resolve="ImplementationModule" />
                </node>
              </node>
            </node>
            <node concept="19SUe$" id="2XVA19iNfA5" role="19SJt6">
              <property role="19SUeA" value=" simply type in " />
            </node>
            <node concept="1jUjqm" id="2XVA19iNfAr" role="19SJt6">
              <node concept="19SGf9" id="2XVA19iNfAs" role="$DsGW">
                <node concept="19SUe$" id="2XVA19iNfAt" role="19SJt6">
                  <property role="19SUeA" value="statemachine" />
                </node>
              </node>
            </node>
            <node concept="19SUe$" id="2XVA19iNfAq" role="19SJt6">
              <property role="19SUeA" value=" at the top level in implementation modules. This will create a new state machine with an initial state and one event already defined. You can leave the event there, we will come back to that later. We know that the airplane will be in various states: " />
            </node>
            <node concept="3z_lpY" id="6lh$fzWbE9" role="19SJt6">
              <node concept="2NCZwO" id="6lh$fzWbEa" role="3z_lpZ">
                <node concept="2NCMab" id="6lh$fzWbEK" role="2NCMaf">
                  <ref role="2NCMaa" to="e1tx:4usdeMNVnYi" resolve="StateMachines" />
                </node>
                <node concept="2NCMab" id="6lh$fzWbEP" role="2NCMaf">
                  <ref role="2NCMaa" to="e1tx:6GXPbpLjxtH" resolve="FlightAnalyzer" />
                </node>
                <node concept="2NCMab" id="6lh$fzWbEX" role="2NCMaf">
                  <ref role="2NCMaa" to="e1tx:6GXPbpLjGfl" resolve="beforeFlight" />
                </node>
              </node>
            </node>
            <node concept="19SUe$" id="6lh$fzWbEb" role="19SJt6">
              <property role="19SUeA" value=", " />
            </node>
            <node concept="3z_lpY" id="6lh$fzWbGa" role="19SJt6">
              <node concept="2NCZwO" id="6lh$fzWbGb" role="3z_lpZ">
                <node concept="2NCMab" id="6lh$fzWbGc" role="2NCMaf">
                  <ref role="2NCMaa" to="e1tx:4usdeMNVnYi" resolve="StateMachines" />
                </node>
                <node concept="2NCMab" id="6lh$fzWbGd" role="2NCMaf">
                  <ref role="2NCMaa" to="e1tx:6GXPbpLjxtH" resolve="FlightAnalyzer" />
                </node>
                <node concept="2NCMab" id="6lh$fzWbH5" role="2NCMaf">
                  <ref role="2NCMaa" to="e1tx:6GXPbpLjGfm" resolve="airborne" />
                </node>
              </node>
            </node>
            <node concept="19SUe$" id="6lh$fzWbG9" role="19SJt6">
              <property role="19SUeA" value=", " />
            </node>
            <node concept="3z_lpY" id="6lh$fzWbHl" role="19SJt6">
              <node concept="2NCZwO" id="6lh$fzWbHm" role="3z_lpZ">
                <node concept="2NCMab" id="6lh$fzWbHn" role="2NCMaf">
                  <ref role="2NCMaa" to="e1tx:4usdeMNVnYi" resolve="StateMachines" />
                </node>
                <node concept="2NCMab" id="6lh$fzWbHo" role="2NCMaf">
                  <ref role="2NCMaa" to="e1tx:6GXPbpLjxtH" resolve="FlightAnalyzer" />
                </node>
                <node concept="2NCMab" id="6lh$fzWbI1" role="2NCMaf">
                  <ref role="2NCMaa" to="e1tx:6GXPbpLjGfn" resolve="landing" />
                </node>
              </node>
            </node>
            <node concept="19SUe$" id="6lh$fzWbHp" role="19SJt6">
              <property role="19SUeA" value=" (and still rolling), " />
            </node>
            <node concept="3z_lpY" id="6lh$fzWbIh" role="19SJt6">
              <node concept="2NCZwO" id="6lh$fzWbIi" role="3z_lpZ">
                <node concept="2NCMab" id="6lh$fzWbIj" role="2NCMaf">
                  <ref role="2NCMaa" to="e1tx:4usdeMNVnYi" resolve="StateMachines" />
                </node>
                <node concept="2NCMab" id="6lh$fzWbIk" role="2NCMaf">
                  <ref role="2NCMaa" to="e1tx:6GXPbpLjxtH" resolve="FlightAnalyzer" />
                </node>
                <node concept="2NCMab" id="6lh$fzWbIZ" role="2NCMaf">
                  <ref role="2NCMaa" to="e1tx:6GXPbpLjGfo" resolve="landed" />
                </node>
              </node>
            </node>
            <node concept="19SUe$" id="6lh$fzWbIl" role="19SJt6">
              <property role="19SUeA" value=" and " />
            </node>
            <node concept="3z_lpY" id="6lh$fzWbJf" role="19SJt6">
              <node concept="2NCZwO" id="6lh$fzWbJg" role="3z_lpZ">
                <node concept="2NCMab" id="6lh$fzWbJh" role="2NCMaf">
                  <ref role="2NCMaa" to="e1tx:4usdeMNVnYi" resolve="StateMachines" />
                </node>
                <node concept="2NCMab" id="6lh$fzWbJi" role="2NCMaf">
                  <ref role="2NCMaa" to="e1tx:6GXPbpLjxtH" resolve="FlightAnalyzer" />
                </node>
                <node concept="2NCMab" id="6lh$fzWbJZ" role="2NCMaf">
                  <ref role="2NCMaa" to="e1tx:6GXPbpLjGiH" resolve="crashed" />
                </node>
              </node>
            </node>
            <node concept="19SUe$" id="6lh$fzWbJj" role="19SJt6">
              <property role="19SUeA" value=". You can just rename the already existing initial state to " />
            </node>
            <node concept="3z_lpY" id="6lh$fzWbKf" role="19SJt6">
              <node concept="2NCZwO" id="6lh$fzWbKg" role="3z_lpZ">
                <node concept="2NCMab" id="6lh$fzWbKh" role="2NCMaf">
                  <ref role="2NCMaa" to="e1tx:4usdeMNVnYi" resolve="StateMachines" />
                </node>
                <node concept="2NCMab" id="6lh$fzWbKi" role="2NCMaf">
                  <ref role="2NCMaa" to="e1tx:6GXPbpLjxtH" resolve="FlightAnalyzer" />
                </node>
                <node concept="2NCMab" id="6lh$fzWbGe" role="2NCMaf">
                  <ref role="2NCMaa" to="e1tx:6GXPbpLjGfl" resolve="beforeFlight" />
                </node>
              </node>
            </node>
            <node concept="19SUe$" id="6lh$fzWbKj" role="19SJt6">
              <property role="19SUeA" value=" and add the other states to the state machine. In the end you should have the following states: " />
            </node>
          </node>
        </node>
        <node concept="3z_lpU" id="_A$C2hiG1j" role="1_0VJ0">
          <property role="3z_lpW" value="mbeddr" />
          <property role="3z_lpJ" value="true" />
          <property role="3z_lpV" value="exported statemachine FlightAnalyzer initial = beforeFlight {&#10;  state beforeFlight {                                       &#10;} state beforeFlight                                         &#10;  state airborne {                                           &#10;} state airborne                                             &#10;  state landing {                                            &#10;} state landing                                              &#10;  state landed {                                             &#10;} state landed                                               &#10;  state crashed {                                            &#10;} state crashed                                              &#10;}                                                            " />
          <node concept="2NCZwO" id="_A$C2hiG1k" role="3z_lpI">
            <node concept="2NCMab" id="_A$C2hiG4e" role="2NCMaf">
              <ref role="2NCMaa" to="e1tx:4usdeMNVnYi" resolve="StateMachines" />
            </node>
            <node concept="2NCMab" id="_A$C2hjIR0" role="2NCMaf">
              <ref role="2NCMaa" to="e1tx:6GXPbpLjxtH" resolve="FlightAnalyzer" />
            </node>
          </node>
          <node concept="2Cuv_b" id="_A$C2hiHiN" role="3z_lpH">
            <ref role="2Cuq_M" to="clqz:50Lk78xBraV" resolve="Transition" />
          </node>
          <node concept="2Cuv_b" id="_A$C2hjJjZ" role="3z_lpH">
            <ref role="2Cuq_M" to="clqz:1z9MsBsVaJj" resolve="Event" />
          </node>
          <node concept="2Cuv_b" id="_A$C2hjNeH" role="3z_lpH">
            <ref role="2Cuq_M" to="clqz:4SJV0WTeRxt" resolve="StatemachineVariableDeclaration" />
          </node>
          <node concept="2Cuv_b" id="_A$C2hjVAc" role="3z_lpH">
            <ref role="2Cuq_M" to="clqz:7iNM$5cFA$P" resolve="AbstractAction" />
          </node>
          <node concept="2Cuv_b" id="6lh$fzUdTh" role="3z_lpH">
            <ref role="2Cuq_M" to="clqz:1_07M0Q77df" resolve="JunctionState" />
          </node>
        </node>
        <node concept="1_0LV8" id="300OR6Gnu_B" role="1_0VJ0">
          <node concept="19SGf9" id="300OR6Gnu_C" role="1_0LWR">
            <node concept="19SUe$" id="300OR6Gnu_D" role="19SJt6">
              <property role="19SUeA" value="The state machine will accept two kinds of events. The first one is the " />
            </node>
            <node concept="3z_lpY" id="6lh$fzWbLc" role="19SJt6">
              <node concept="2NCZwO" id="6lh$fzWbLd" role="3z_lpZ">
                <node concept="2NCMab" id="6lh$fzWbLe" role="2NCMaf">
                  <ref role="2NCMaa" to="e1tx:4usdeMNVnYi" resolve="StateMachines" />
                </node>
                <node concept="2NCMab" id="6lh$fzWbLf" role="2NCMaf">
                  <ref role="2NCMaa" to="e1tx:6GXPbpLjxtH" resolve="FlightAnalyzer" />
                </node>
                <node concept="2NCMab" id="6lh$fzWbLD" role="2NCMaf">
                  <ref role="2NCMaa" to="e1tx:6GXPbpLjGfq" resolve="next" />
                </node>
              </node>
            </node>
            <node concept="19SUe$" id="6lh$fzWbLh" role="19SJt6">
              <property role="19SUeA" value=" event, which takes the next trackpoint submitted for evaluation. Note how an event can have arguments of arbitrary C types, a pointer to a " />
            </node>
            <node concept="3z_lpY" id="6lh$fzWbLT" role="19SJt6">
              <node concept="2NCZwO" id="6lh$fzWbLU" role="3z_lpZ">
                <node concept="2NCMab" id="6lh$fzWbMr" role="2NCMaf">
                  <ref role="2NCMaa" to="e1tx:1w5Xuj1QYMp" resolve="DataStructures" />
                </node>
                <node concept="2NCMab" id="6lh$fzWbMx" role="2NCMaf">
                  <ref role="2NCMaa" to="e1tx:1w5Xuj1QYMq" resolve="Trackpoint" />
                </node>
              </node>
            </node>
            <node concept="19SUe$" id="6lh$fzWbLY" role="19SJt6">
              <property role="19SUeA" value=" in this example. The " />
            </node>
            <node concept="1jUjqm" id="1CZbvxNbq2l" role="19SJt6">
              <node concept="19SGf9" id="1CZbvxNbq2m" role="$DsGW">
                <node concept="19SUe$" id="1CZbvxNbq2n" role="19SJt6">
                  <property role="19SUeA" value="Trackpoint" />
                </node>
              </node>
            </node>
            <node concept="19SUe$" id="1CZbvxNbq2p" role="19SJt6">
              <property role="19SUeA" value=" struct is already defined in the " />
            </node>
            <node concept="3z_lpY" id="6lh$fzWeYA" role="19SJt6">
              <node concept="2NCZwO" id="6lh$fzWeYB" role="3z_lpZ">
                <node concept="2NCMab" id="6lh$fzWf7d" role="2NCMaf">
                  <ref role="2NCMaa" to="e1tx:1w5Xuj1QYMp" resolve="DataStructures" />
                </node>
              </node>
            </node>
            <node concept="19SUe$" id="6lh$fzWeYF" role="19SJt6">
              <property role="19SUeA" value=" module. The other event, " />
            </node>
            <node concept="3z_lpY" id="6lh$fzWf7G" role="19SJt6">
              <node concept="2NCZwO" id="6lh$fzWf7H" role="3z_lpZ">
                <node concept="2NCMab" id="6lh$fzWf7I" role="2NCMaf">
                  <ref role="2NCMaa" to="e1tx:4usdeMNVnYi" resolve="StateMachines" />
                </node>
                <node concept="2NCMab" id="6lh$fzWf7J" role="2NCMaf">
                  <ref role="2NCMaa" to="e1tx:6GXPbpLjxtH" resolve="FlightAnalyzer" />
                </node>
                <node concept="2NCMab" id="6lh$fzWf8c" role="2NCMaf">
                  <ref role="2NCMaa" to="e1tx:6GXPbpLjGg1" resolve="reset" />
                </node>
              </node>
            </node>
            <node concept="19SUe$" id="6lh$fzWf7L" role="19SJt6">
              <property role="19SUeA" value=", resets the state machine back to its initial state. " />
            </node>
          </node>
        </node>
        <node concept="3z_lpU" id="_A$C2hmXsm" role="1_0VJ0">
          <property role="3z_lpW" value="mbeddr" />
          <property role="3z_lpJ" value="true" />
          <property role="3z_lpV" value="exported statemachine FlightAnalyzer initial = beforeFlight {&#10;  in event next(Trackpoint* tp) &lt;no binding&gt;                 &#10;  in event reset() &lt;no binding&gt;                              &#10;}                                                            " />
          <node concept="2NCZwO" id="_A$C2hmXsn" role="3z_lpI">
            <node concept="2NCMab" id="_A$C2hmXyj" role="2NCMaf">
              <ref role="2NCMaa" to="e1tx:4usdeMNVnYi" resolve="StateMachines" />
            </node>
            <node concept="2NCMab" id="_A$C2hmXyr" role="2NCMaf">
              <ref role="2NCMaa" to="e1tx:6GXPbpLjxtH" resolve="FlightAnalyzer" />
            </node>
          </node>
          <node concept="2Cuv_b" id="_A$C2hmXBT" role="3z_lpH">
            <ref role="2Cuq_M" to="clqz:50Lk78xBraV" resolve="Transition" />
          </node>
          <node concept="2Cuv_b" id="_A$C2hmXSb" role="3z_lpH">
            <ref role="2Cuq_M" to="clqz:4SJV0WTeRxt" resolve="StatemachineVariableDeclaration" />
          </node>
          <node concept="2Cuv_b" id="_A$C2hmY8x" role="3z_lpH">
            <ref role="2Cuq_M" to="clqz:7iNM$5cFA$P" resolve="AbstractAction" />
          </node>
          <node concept="2Cuv_b" id="_A$C2hmYoR" role="3z_lpH">
            <ref role="2Cuq_M" to="clqz:3FSHg1aADay" resolve="AbstractState" />
          </node>
          <node concept="2Cuv_b" id="_A$C2hn1RL" role="3z_lpH">
            <ref role="2Cuq_M" to="clqz:41KMvfcjScu" resolve="OutEvent" />
          </node>
        </node>
        <node concept="1_0LV8" id="300OR6Gnzod" role="1_0VJ0">
          <node concept="19SGf9" id="300OR6Gnzoe" role="1_0LWR">
            <node concept="19SUe$" id="300OR6Gnzof" role="19SJt6">
              <property role="19SUeA" value="We also need a variable in the state machine to keep track of the points we have accumulated during the flight. In order to create a new variable simply type " />
            </node>
            <node concept="1jUjqm" id="2XVA19iNAfj" role="19SJt6">
              <node concept="19SGf9" id="2XVA19iNAfk" role="$DsGW">
                <node concept="19SUe$" id="2XVA19iNAfl" role="19SJt6">
                  <property role="19SUeA" value="var" />
                </node>
              </node>
            </node>
            <node concept="19SUe$" id="2XVA19iNAfi" role="19SJt6">
              <property role="19SUeA" value=" in the state machine. This creates a new variable, you need to specify its name and the type. The newly created variable is invisible from outside by default, you can change this to " />
            </node>
            <node concept="1jUjqm" id="1CZbvxNbyBq" role="19SJt6">
              <node concept="19SGf9" id="1CZbvxNbyBr" role="$DsGW">
                <node concept="19SUe$" id="1CZbvxNbyBs" role="19SJt6">
                  <property role="19SUeA" value="readable" />
                </node>
              </node>
            </node>
            <node concept="19SUe$" id="1CZbvxNbyBu" role="19SJt6">
              <property role="19SUeA" value=" or " />
            </node>
            <node concept="1jUjqm" id="1CZbvxNbyBH" role="19SJt6">
              <node concept="19SGf9" id="1CZbvxNbyBI" role="$DsGW">
                <node concept="19SUe$" id="1CZbvxNbyBJ" role="19SJt6">
                  <property role="19SUeA" value="writable" />
                </node>
              </node>
            </node>
            <node concept="19SUe$" id="1CZbvxNbyBL" role="19SJt6">
              <property role="19SUeA" value=" with the corresponding intentions. Readable variables may be read from outside of the state machine, while writable variables can also be modified from the interacting C code (you will have to create a state machine instance first; we explain this below). In the end you should have a " />
            </node>
            <node concept="1jUjqm" id="2XVA19iNENL" role="19SJt6">
              <node concept="19SGf9" id="2XVA19iNENM" role="$DsGW">
                <node concept="19SUe$" id="2XVA19iNENN" role="19SJt6">
                  <property role="19SUeA" value="points" />
                </node>
              </node>
            </node>
            <node concept="19SUe$" id="2XVA19iNENK" role="19SJt6">
              <property role="19SUeA" value=" variable in the state machine which is readable only:" />
            </node>
          </node>
        </node>
        <node concept="3z_lpU" id="_A$C2hn308" role="1_0VJ0">
          <property role="3z_lpW" value="mbeddr" />
          <property role="3z_lpJ" value="true" />
          <property role="3z_lpV" value="exported statemachine FlightAnalyzer initial = beforeFlight {&#10;  readable var int16 points = 0                              &#10;}                                                            " />
          <node concept="2NCZwO" id="_A$C2hn309" role="3z_lpI">
            <node concept="2NCMab" id="_A$C2hn36l" role="2NCMaf">
              <ref role="2NCMaa" to="e1tx:4usdeMNVnYi" resolve="StateMachines" />
            </node>
            <node concept="2NCMab" id="_A$C2hn36t" role="2NCMaf">
              <ref role="2NCMaa" to="e1tx:6GXPbpLjxtH" resolve="FlightAnalyzer" />
            </node>
          </node>
          <node concept="2Cuv_b" id="_A$C2hn36A" role="3z_lpH">
            <ref role="2Cuq_M" to="clqz:50Lk78xBraV" resolve="Transition" />
          </node>
          <node concept="2Cuv_b" id="_A$C2hn36W" role="3z_lpH">
            <ref role="2Cuq_M" to="clqz:7iNM$5cFA$P" resolve="AbstractAction" />
          </node>
          <node concept="2Cuv_b" id="_A$C2hn37d" role="3z_lpH">
            <ref role="2Cuq_M" to="clqz:3FSHg1aADay" resolve="AbstractState" />
          </node>
          <node concept="2Cuv_b" id="_A$C2hn37y" role="3z_lpH">
            <ref role="2Cuq_M" to="clqz:1z9MsBsVaJj" resolve="Event" />
          </node>
        </node>
        <node concept="1_0LV8" id="300OR6GnCba" role="1_0VJ0">
          <node concept="19SGf9" id="300OR6GnCbb" role="1_0LWR">
            <node concept="19SUe$" id="300OR6GnCbc" role="19SJt6">
              <property role="19SUeA" value="We can now implement the rules outlined above using transitions and actions. Let us start with some simple ones. Whenever we enter " />
            </node>
            <node concept="3z_lpY" id="6lh$fzWf8s" role="19SJt6">
              <node concept="2NCZwO" id="6lh$fzWf8t" role="3z_lpZ">
                <node concept="2NCMab" id="6lh$fzWf8u" role="2NCMaf">
                  <ref role="2NCMaa" to="e1tx:4usdeMNVnYi" resolve="StateMachines" />
                </node>
                <node concept="2NCMab" id="6lh$fzWf8v" role="2NCMaf">
                  <ref role="2NCMaa" to="e1tx:6GXPbpLjxtH" resolve="FlightAnalyzer" />
                </node>
                <node concept="2NCMab" id="6lh$fzWf8w" role="2NCMaf">
                  <ref role="2NCMaa" to="e1tx:6GXPbpLjGfl" resolve="beforeFlight" />
                </node>
              </node>
            </node>
            <node concept="19SUe$" id="6lh$fzWf8x" role="19SJt6">
              <property role="19SUeA" value=" we reset the points to 0. We can achieve this with an entry action in " />
            </node>
            <node concept="3z_lpY" id="6lh$fzWf8S" role="19SJt6">
              <node concept="2NCZwO" id="6lh$fzWf8T" role="3z_lpZ">
                <node concept="2NCMab" id="6lh$fzWf8U" role="2NCMaf">
                  <ref role="2NCMaa" to="e1tx:4usdeMNVnYi" resolve="StateMachines" />
                </node>
                <node concept="2NCMab" id="6lh$fzWf8V" role="2NCMaf">
                  <ref role="2NCMaa" to="e1tx:6GXPbpLjxtH" resolve="FlightAnalyzer" />
                </node>
                <node concept="2NCMab" id="6lh$fzWf8W" role="2NCMaf">
                  <ref role="2NCMaa" to="e1tx:6GXPbpLjGfl" resolve="beforeFlight" />
                </node>
              </node>
            </node>
            <node concept="19SUe$" id="6lh$fzWf8X" role="19SJt6">
              <property role="19SUeA" value=":" />
            </node>
          </node>
        </node>
        <node concept="3z_lpU" id="_A$C2hn3Nn" role="1_0VJ0">
          <property role="3z_lpW" value="mbeddr" />
          <property role="3z_lpJ" value="true" />
          <property role="3z_lpw" value="true" />
          <property role="3z_lpV" value="exported statemachine FlightAnalyzer initial = beforeFlight {&#10;  state beforeFlight {                                       &#10;  entry { points = 0; }                                      &#10;} state beforeFlight                                         &#10;}                                                            " />
          <node concept="2NCZwO" id="_A$C2hn3No" role="3z_lpI">
            <node concept="2NCMab" id="_A$C2hn3TM" role="2NCMaf">
              <ref role="2NCMaa" to="e1tx:4usdeMNVnYi" resolve="StateMachines" />
            </node>
            <node concept="2NCMab" id="_A$C2hn3TU" role="2NCMaf">
              <ref role="2NCMaa" to="e1tx:6GXPbpLjxtH" resolve="FlightAnalyzer" />
            </node>
          </node>
          <node concept="2Cuv_b" id="_A$C2hnkzO" role="3z_lpH">
            <ref role="2Cuq_M" to="clqz:50Lk78xBraV" resolve="Transition" />
          </node>
          <node concept="2Cuv_b" id="_A$C2hnkO1" role="3z_lpH">
            <ref role="2Cuq_M" to="clqz:1z9MsBsVaJj" resolve="Event" />
          </node>
          <node concept="2Cuv_b" id="_A$C2hnl4j" role="3z_lpH">
            <ref role="2Cuq_M" to="clqz:4SJV0WTeRxt" resolve="StatemachineVariableDeclaration" />
          </node>
          <node concept="2Cuv_b" id="_A$C2hnoSY" role="3z_lpH">
            <ref role="2Cuq_M" to="clqz:47Sr75PmG8W" resolve="ExitAction" />
          </node>
          <node concept="3z_lpK" id="_A$C2hnp9s" role="3z_lpH">
            <ref role="3z_lpL" to="e1tx:6GXPbpLjGfm" resolve="airborne" />
          </node>
          <node concept="3z_lpK" id="_A$C2hnpnA" role="3z_lpH">
            <ref role="3z_lpL" to="e1tx:6GXPbpLjGfo" resolve="landed" />
          </node>
          <node concept="3z_lpK" id="_A$C2hnp_K" role="3z_lpH">
            <ref role="3z_lpL" to="e1tx:6GXPbpLjGiH" resolve="crashed" />
          </node>
          <node concept="3z_lpK" id="_A$C2hnpO0" role="3z_lpH">
            <ref role="3z_lpL" to="e1tx:6GXPbpLjGfn" resolve="landing" />
          </node>
          <node concept="2Cuv_b" id="6lh$fzUea4" role="3z_lpH">
            <ref role="2Cuq_M" to="clqz:1_07M0Q77df" resolve="JunctionState" />
          </node>
        </node>
        <node concept="1_0LV8" id="300OR6GnEBS" role="1_0VJ0">
          <node concept="19SGf9" id="300OR6GnEBT" role="1_0LWR">
            <node concept="19SUe$" id="300OR6GnEBU" role="19SJt6">
              <property role="19SUeA" value="There are some additional rules for taking off, landing and conditions for crashing." />
            </node>
          </node>
        </node>
        <node concept="3X6WG5" id="6lh$fzSOip" role="1_0VJ0">
          <node concept="3X6T9g" id="6lh$fzSOiq" role="3Xp5NH">
            <node concept="OjmMv" id="6lh$fzSOir" role="3X6T9h">
              <node concept="19SGf9" id="6lh$fzSOis" role="OjmMu">
                <node concept="19SUe$" id="6lh$fzSOit" role="19SJt6">
                  <property role="19SUeA" value="All states other than " />
                </node>
                <node concept="3z_lpY" id="6lh$fzWf9m" role="19SJt6">
                  <node concept="2NCZwO" id="6lh$fzWf9n" role="3z_lpZ">
                    <node concept="2NCMab" id="6lh$fzWf9o" role="2NCMaf">
                      <ref role="2NCMaa" to="e1tx:4usdeMNVnYi" resolve="StateMachines" />
                    </node>
                    <node concept="2NCMab" id="6lh$fzWf9q" role="2NCMaf">
                      <ref role="2NCMaa" to="e1tx:6GXPbpLjGfl" resolve="beforeFlight" />
                    </node>
                  </node>
                </node>
                <node concept="19SUe$" id="6lh$fzWf9r" role="19SJt6">
                  <property role="19SUeA" value=" must have a transition triggered by the " />
                </node>
                <node concept="3z_lpY" id="6lh$fzWfb8" role="19SJt6">
                  <node concept="2NCZwO" id="6lh$fzWfb9" role="3z_lpZ">
                    <node concept="2NCMab" id="6lh$fzWfba" role="2NCMaf">
                      <ref role="2NCMaa" to="e1tx:4usdeMNVnYi" resolve="StateMachines" />
                    </node>
                    <node concept="2NCMab" id="6lh$fzWfbb" role="2NCMaf">
                      <ref role="2NCMaa" to="e1tx:6GXPbpLjxtH" resolve="FlightAnalyzer" />
                    </node>
                    <node concept="2NCMab" id="6lh$fzWfbB" role="2NCMaf">
                      <ref role="2NCMaa" to="e1tx:6GXPbpLjGg1" resolve="reset" />
                    </node>
                  </node>
                </node>
                <node concept="19SUe$" id="6lh$fzWfbd" role="19SJt6">
                  <property role="19SUeA" value=" event to go back to the " />
                </node>
                <node concept="3z_lpY" id="6lh$fzWfaw" role="19SJt6">
                  <node concept="2NCZwO" id="6lh$fzWfax" role="3z_lpZ">
                    <node concept="2NCMab" id="6lh$fzWfay" role="2NCMaf">
                      <ref role="2NCMaa" to="e1tx:4usdeMNVnYi" resolve="StateMachines" />
                    </node>
                    <node concept="2NCMab" id="6lh$fzWfaz" role="2NCMaf">
                      <ref role="2NCMaa" to="e1tx:6GXPbpLjxtH" resolve="FlightAnalyzer" />
                    </node>
                    <node concept="2NCMab" id="6lh$fzWfa$" role="2NCMaf">
                      <ref role="2NCMaa" to="e1tx:6GXPbpLjGfl" resolve="beforeFlight" />
                    </node>
                  </node>
                </node>
                <node concept="19SUe$" id="6lh$fzWfa_" role="19SJt6">
                  <property role="19SUeA" value=" state. Note, that as a consequence of the entry action in the " />
                </node>
                <node concept="3z_lpY" id="6lh$fzWf9U" role="19SJt6">
                  <node concept="2NCZwO" id="6lh$fzWf9V" role="3z_lpZ">
                    <node concept="2NCMab" id="6lh$fzWf9W" role="2NCMaf">
                      <ref role="2NCMaa" to="e1tx:4usdeMNVnYi" resolve="StateMachines" />
                    </node>
                    <node concept="2NCMab" id="6lh$fzWf9X" role="2NCMaf">
                      <ref role="2NCMaa" to="e1tx:6GXPbpLjxtH" resolve="FlightAnalyzer" />
                    </node>
                    <node concept="2NCMab" id="6lh$fzWf9Y" role="2NCMaf">
                      <ref role="2NCMaa" to="e1tx:6GXPbpLjGfl" resolve="beforeFlight" />
                    </node>
                  </node>
                </node>
                <node concept="19SUe$" id="6lh$fzWf9Z" role="19SJt6">
                  <property role="19SUeA" value=" state, the points get reset in all three cases." />
                </node>
              </node>
            </node>
          </node>
          <node concept="3X6T9g" id="6lh$fzSPqg" role="3Xp5NH">
            <node concept="OjmMv" id="6lh$fzSPqh" role="3X6T9h">
              <node concept="19SGf9" id="6lh$fzSPqi" role="OjmMu">
                <node concept="19SUe$" id="6lh$fzSPqj" role="19SJt6">
                  <property role="19SUeA" value="As soon as we submit a trackpoint where the altitude is greater than zero we can transition to the airborne state. This means we have successfully taken off, and we should get 100 points in bonus. " />
                </node>
                <node concept="3z_lpY" id="6lh$fzWfbR" role="19SJt6">
                  <node concept="2NCZwO" id="6lh$fzWfbS" role="3z_lpZ">
                    <node concept="2NCMab" id="6lh$fzWfbT" role="2NCMaf">
                      <ref role="2NCMaa" to="e1tx:4usdeMNVnYi" resolve="StateMachines" />
                    </node>
                    <node concept="2NCMab" id="6lh$fzWqnr" role="2NCMaf">
                      <ref role="2NCMaa" to="e1tx:6GXPbpLjGgi" resolve="TAKEOFF" />
                    </node>
                  </node>
                </node>
                <node concept="19SUe$" id="6lh$fzWfbW" role="19SJt6">
                  <property role="19SUeA" value=" is a global constant representing 100 (" />
                </node>
                <node concept="1jUjqm" id="6lh$fzSPw8" role="19SJt6">
                  <node concept="19SGf9" id="6lh$fzSPw9" role="$DsGW">
                    <node concept="19SUe$" id="6lh$fzSPwa" role="19SJt6">
                      <property role="19SUeA" value="#constant TAKEOFF = 100;" />
                    </node>
                  </node>
                </node>
                <node concept="19SUe$" id="6lh$fzSPwb" role="19SJt6">
                  <property role="19SUeA" value="). We also make use of the physical units extension (see " />
                </node>
                <node concept="1_0GAv" id="6lh$fzSTbT" role="19SJt6">
                  <ref role="1_0GAl" node="3mn43GO8cu5" resolve="units" />
                </node>
                <node concept="19SUe$" id="6lh$fzSTbS" role="19SJt6">
                  <property role="19SUeA" value=") and annotate the speed and altitude with the appropriate unit." />
                </node>
              </node>
            </node>
          </node>
          <node concept="3X6T9g" id="6lh$fzSTvE" role="3Xp5NH">
            <node concept="OjmMv" id="6lh$fzSTvF" role="3X6T9h">
              <node concept="19SGf9" id="6lh$fzSTvG" role="OjmMu">
                <node concept="19SUe$" id="6lh$fzSTvH" role="19SJt6">
                  <property role="19SUeA" value="Events while we are in the air: when we are airborne and we receive a trackpoint with zero altitude and zero speed (without going through an orderly landing process), we have crashed. If we are at altitude zero with a speed greater than zero, we are in the process of landing. The other two cases deal with flying at over 200 and over 100 mps. In this case we stay in the " />
                </node>
                <node concept="3z_lpY" id="6lh$fzWATz" role="19SJt6">
                  <node concept="2NCZwO" id="6lh$fzWAT$" role="3z_lpZ">
                    <node concept="2NCMab" id="6lh$fzWAT_" role="2NCMaf">
                      <ref role="2NCMaa" to="e1tx:4usdeMNVnYi" resolve="StateMachines" />
                    </node>
                    <node concept="2NCMab" id="6lh$fzWATA" role="2NCMaf">
                      <ref role="2NCMaa" to="e1tx:6GXPbpLjxtH" resolve="FlightAnalyzer" />
                    </node>
                    <node concept="2NCMab" id="6lh$fzWATK" role="2NCMaf">
                      <ref role="2NCMaa" to="e1tx:6GXPbpLjGfm" resolve="airborne" />
                    </node>
                  </node>
                </node>
                <node concept="19SUe$" id="6lh$fzWATC" role="19SJt6">
                  <property role="19SUeA" value=" state (by transitioning to itself) but we increase the points." />
                </node>
              </node>
            </node>
          </node>
        </node>
        <node concept="1_0LV8" id="6lh$fzSVwo" role="1_0VJ0">
          <node concept="19SGf9" id="6lh$fzSVwp" role="1_0LWR">
            <node concept="19SUe$" id="6lh$fzSVwq" role="19SJt6">
              <property role="19SUeA" value="The complete set of transitions is as follows:" />
            </node>
          </node>
        </node>
        <node concept="3z_lpU" id="6lh$fzSChe" role="1_0VJ0">
          <property role="3z_lpW" value="mbeddr" />
          <property role="3z_lpJ" value="true" />
          <property role="3z_lpV" value="exported statemachine FlightAnalyzer initial = beforeFlight {                                             &#10;  state beforeFlight {                                                                                    &#10;  entry { points = 0; }                                                                                   &#10;  on next [tp.alt &gt; 0 m] -&gt; airborne                                                                      &#10;  exit { points += TAKEOFF; }                                                                             &#10;} state beforeFlight                                                                                      &#10;  state airborne {                                                                                        &#10;  on next [tp.alt == 0 m&amp;&amp; tp.speed == 0 mps] -&gt; crashed                                                  &#10;  on next [tp.alt == 0 m&amp;&amp; tp.speed &gt; 0 mps] -&gt; landing                                                   &#10;  on next [tp.speed &gt; 200 mps&amp;&amp; tp.alt == 0 m] -&gt; airborne { points += VERY_HIGH_SPEED; }                 &#10;  on next [tp.speed &gt; 100 mps&amp;&amp; tp.speed &lt;= 200 mps&amp;&amp; tp.alt == 0 m] -&gt; airborne { points += HIGH_SPEED; }&#10;  on reset [ ] -&gt; beforeFlight                                                                            &#10;} state airborne                                                                                          &#10;  state landing {                                                                                         &#10;  on next [tp.speed == 0 mps] -&gt; landed                                                                   &#10;  on next [tp.speed &gt; 0 mps] -&gt; landing { points--; }                                                     &#10;  on reset [ ] -&gt; beforeFlight                                                                            &#10;} state landing                                                                                           &#10;  state landed {                                                                                          &#10;  entry { points += LANDING; }                                                                            &#10;  on reset [ ] -&gt; beforeFlight                                                                            &#10;} state landed                                                                                            &#10;  state crashed {                                                                                         &#10;  entry { send crashNotification(); }                                                                     &#10;} state crashed                                                                                           &#10;}                                                                                                         " />
          <node concept="2NCZwO" id="6lh$fzSChf" role="3z_lpI">
            <node concept="2NCMab" id="6lh$fzSCkC" role="2NCMaf">
              <ref role="2NCMaa" to="e1tx:4usdeMNVnYi" resolve="StateMachines" />
            </node>
            <node concept="2NCMab" id="6lh$fzSCz1" role="2NCMaf">
              <ref role="2NCMaa" to="e1tx:6GXPbpLjxtH" resolve="FlightAnalyzer" />
            </node>
          </node>
          <node concept="2Cuv_b" id="6lh$fzSCCu" role="3z_lpH">
            <ref role="2Cuq_M" to="clqz:1z9MsBsVaJj" resolve="Event" />
          </node>
          <node concept="2Cuv_b" id="6lh$fzSD8X" role="3z_lpH">
            <ref role="2Cuq_M" to="clqz:4SJV0WTeRxt" resolve="StatemachineVariableDeclaration" />
          </node>
          <node concept="2Cuv_b" id="6lh$fzUeqR" role="3z_lpH">
            <ref role="2Cuq_M" to="clqz:1_07M0Q77df" resolve="JunctionState" />
          </node>
        </node>
        <node concept="1_0LV8" id="300OR6GobDw" role="1_0VJ0">
          <node concept="19SGf9" id="300OR6GobDx" role="1_0LWR">
            <node concept="19SUe$" id="300OR6GobDy" role="19SJt6">
              <property role="19SUeA" value="Note that the transitions are checked in the order of their appearance in the state machine; if several of them are ready to fire (based on the received event and the evaluation of the guard conditions), the first one is picked. Actually this kind of nondeterminism is usually not wanted and mbeddr provides support for the verification of state machines, which you can read more about in " />
            </node>
            <node concept="1_0GAv" id="2XVA19iOlBD" role="19SJt6">
              <ref role="1_0GAl" to="us0v:3JyX84yR4zp" resolve="state_machines" />
            </node>
            <node concept="19SUe$" id="2XVA19iOlBC" role="19SJt6">
              <property role="19SUeA" value="." />
            </node>
          </node>
        </node>
        <node concept="1_0LV8" id="3_mefG7YfFl" role="1_0VJ0">
          <node concept="19SGf9" id="3_mefG7YfFm" role="1_0LWR">
            <node concept="19SUe$" id="3_mefG7YfFn" role="19SJt6">
              <property role="19SUeA" value="Junction states (influenced by Simulink) can also be created in the state machine in mbeddr. A junction state can only contain epsilon-transitions, meaning these transitions are immediately ready to fire when the state is entered, they don't need a triggering event. Having multiple epsilon-transitions clearly introduces nondeterminism, so one typically specifies guards for these transitions. The following example uses the " />
            </node>
            <node concept="1jUjqm" id="1CZbvxNbzMO" role="19SJt6">
              <node concept="19SGf9" id="1CZbvxNbzMP" role="$DsGW">
                <node concept="19SUe$" id="1CZbvxNbzMQ" role="19SJt6">
                  <property role="19SUeA" value="points" />
                </node>
              </node>
            </node>
            <node concept="19SUe$" id="1CZbvxNbzMS" role="19SJt6">
              <property role="19SUeA" value=" variable to select the state transition that should be applied. The example junction state makes a decision based on the points and immediately fires. " />
            </node>
          </node>
        </node>
        <node concept="3z_lpU" id="6lh$fzUeJ2" role="1_0VJ0">
          <property role="3z_lpW" value="mbeddr" />
          <property role="3z_lpJ" value="true" />
          <property role="3z_lpV" value="exported statemachine FlightAnalyzer initial = beforeFlight {&#10;  junction NextRound {                                       &#10;  [points &gt; 100] -&gt; airborne                                 &#10;  [points &lt;= 100] -&gt; beforeFlight                            &#10;} junction NextRound                                         &#10;}                                                            " />
          <node concept="2NCZwO" id="6lh$fzUeJ3" role="3z_lpI">
            <node concept="2NCMab" id="6lh$fzUeS7" role="2NCMaf">
              <ref role="2NCMaa" to="e1tx:4usdeMNVnYi" resolve="StateMachines" />
            </node>
            <node concept="2NCMab" id="6lh$fzUf2b" role="2NCMaf">
              <ref role="2NCMaa" to="e1tx:6GXPbpLjxtH" resolve="FlightAnalyzer" />
            </node>
          </node>
          <node concept="2Cuv_b" id="6lh$fzUflX" role="3z_lpH">
            <ref role="2Cuq_M" to="clqz:1z9MsBsVaJj" resolve="Event" />
          </node>
          <node concept="2Cuv_b" id="6lh$fzUfIW" role="3z_lpH">
            <ref role="2Cuq_M" to="clqz:50Lk78xBraf" resolve="State" />
          </node>
          <node concept="2Cuv_b" id="6lh$fzUjG1" role="3z_lpH">
            <ref role="2Cuq_M" to="clqz:4SJV0WTeRxt" resolve="StatemachineVariableDeclaration" />
          </node>
        </node>
        <node concept="1_0LV8" id="1CZbvxNbzS_" role="1_0VJ0">
          <node concept="19SGf9" id="1CZbvxNbzSA" role="1_0LWR">
            <node concept="19SUe$" id="1CZbvxNbzSB" role="19SJt6">
              <property role="19SUeA" value="Junctions are essentially branching points in a statemachine and help modularize complex guards (especially if several guards in one state have common subexpressions):" />
            </node>
          </node>
        </node>
      </node>
      <node concept="1_0VNX" id="300OR6GojoL" role="1_0VJ0">
        <property role="TrG5h" value="interactingWithOtherCodeOutbound" />
        <property role="1_0VJr" value="Interacting with Other Code -- Outbound" />
        <node concept="1_0LV8" id="300OR6GojrO" role="1_0VJ0">
          <node concept="19SGf9" id="300OR6GojrP" role="1_0LWR">
            <node concept="19SUe$" id="300OR6GojrQ" role="19SJt6">
              <property role="19SUeA" value="So how do we deal with the " />
            </node>
            <node concept="3z_lpY" id="6lh$fzWAU0" role="19SJt6">
              <node concept="2NCZwO" id="6lh$fzWAU1" role="3z_lpZ">
                <node concept="2NCMab" id="6lh$fzWAU2" role="2NCMaf">
                  <ref role="2NCMaa" to="e1tx:4usdeMNVnYi" resolve="StateMachines" />
                </node>
                <node concept="2NCMab" id="6lh$fzWAU3" role="2NCMaf">
                  <ref role="2NCMaa" to="e1tx:6GXPbpLjxtH" resolve="FlightAnalyzer" />
                </node>
                <node concept="2NCMab" id="6lh$fzWAUh" role="2NCMaf">
                  <ref role="2NCMaa" to="e1tx:6GXPbpLjGiH" resolve="crashed" />
                </node>
              </node>
            </node>
            <node concept="19SUe$" id="6lh$fzWAU5" role="19SJt6">
              <property role="19SUeA" value=" state? Assume this flight analyzer runs on a server, analyzing flights that are submitted via the web. If we detect a crash, we want to send notifications or perform other kinds of error handling. In any case, this would involve the invocation of some external code. This can be performed in two ways: " />
            </node>
          </node>
        </node>
        <node concept="1_0LV8" id="1CZbvxNb$ma" role="1_0VJ0">
          <node concept="19SGf9" id="1CZbvxNb$mb" role="1_0LWR">
            <node concept="19SUe$" id="1CZbvxNb$mc" role="19SJt6">
              <property role="19SUeA" value="The first one is to simply invoke a C function from an entry or exit action. Another alternative, which is more suitable for formal analysis (as we will see below and in " />
            </node>
            <node concept="1_0GAv" id="1CZbvxNb_rf" role="19SJt6">
              <ref role="1_0GAl" to="us0v:3JyX84yR4zp" resolve="state_machines" />
            </node>
            <node concept="19SUe$" id="1CZbvxNb_re" role="19SJt6">
              <property role="19SUeA" value=") involves out events. From the entry action we " />
            </node>
            <node concept="1jUjqm" id="6lh$fzUGo3" role="19SJt6">
              <node concept="19SGf9" id="6lh$fzUGo4" role="$DsGW">
                <node concept="19SUe$" id="6lh$fzUGo5" role="19SJt6">
                  <property role="19SUeA" value="send" />
                </node>
              </node>
            </node>
            <node concept="19SUe$" id="6lh$fzUGo2" role="19SJt6">
              <property role="19SUeA" value=" an out event, which we have defined in the state machine. The following code example shows how the latter one would look like. " />
            </node>
          </node>
        </node>
        <node concept="3z_lpU" id="6lh$fzUsuv" role="1_0VJ0">
          <property role="3z_lpW" value="mbeddr" />
          <property role="3z_lpw" value="true" />
          <property role="3z_lpJ" value="true" />
          <property role="3z_lpV" value="                                                                                                                     &#10; StateMachines                                                                                                       &#10;model   mbeddr.tutorial.main.defaultExtensions                                                                       &#10;package examples    constraints                                                                                      &#10;                                                                                                                     &#10;                                                                                                                     &#10;exported statemachine FlightAnalyzer initial = beforeFlight {                                                        &#10;  out event crashNotification() =&gt; raiseAlarm                                                                        &#10;  state crashed {                                                                                                    &#10;  entry { send crashNotification(); }                                                                                &#10;} state crashed                                                                                                      &#10;}                                                                                                                    &#10;void raiseAlarm() {                                                                                                  &#10;  //invoke some kind of real-world thingy                                                                            &#10;  //that reacts suitably to a detected crash                                                                         &#10;} raiseAlarm (function)                                                                                              &#10;                                                                                     imports     FlightJudgementRules&#10;                                                                                                 DataStructures      &#10;                                                                                                 stdlib_stub         &#10;                                                                                                 stdio_stub          &#10;                                                                                                 UnitDeclarations    &#10;                                                                                                 SIUnits             " />
          <node concept="2NCZwO" id="6lh$fzUsuw" role="3z_lpI">
            <node concept="2NCMab" id="6lh$fzUs$z" role="2NCMaf">
              <ref role="2NCMaa" to="e1tx:4usdeMNVnYi" resolve="StateMachines" />
            </node>
          </node>
          <node concept="3z_lpK" id="6lh$fzUsXe" role="3z_lpH">
            <ref role="3z_lpL" to="e1tx:7prHJyKFEw9" resolve="HierarchicalFlightAnalyzer" />
          </node>
          <node concept="3z_lpK" id="6lh$fzUtAd" role="3z_lpH">
            <ref role="3z_lpL" to="e1tx:6GXPbpLjHh$" resolve="makeTP" />
          </node>
          <node concept="2Cuv_b" id="6lh$fzUufc" role="3z_lpH">
            <ref role="2Cuq_M" to="x27k:3ilck8KpYYm" resolve="GlobalConstantDeclaration" />
          </node>
          <node concept="3z_lpK" id="6lh$fzUytE" role="3z_lpH">
            <ref role="3z_lpL" to="e1tx:6GXPbpLjseN" resolve="testFlightAnalyzer" />
          </node>
          <node concept="2Cuv_b" id="6lh$fzUBKr" role="3z_lpH">
            <ref role="2Cuq_M" to="clqz:41KMvfcjSct" resolve="InEvent" />
          </node>
          <node concept="3z_lpK" id="6lh$fzUCpy" role="3z_lpH">
            <ref role="3z_lpL" to="e1tx:6GXPbpLjGfm" resolve="airborne" />
          </node>
          <node concept="3z_lpK" id="6lh$fzUD0j" role="3z_lpH">
            <ref role="3z_lpL" to="e1tx:6GXPbpLjGfo" resolve="landed" />
          </node>
          <node concept="3z_lpK" id="6lh$fzUDB2" role="3z_lpH">
            <ref role="3z_lpL" to="e1tx:6GXPbpLjGfn" resolve="landing" />
          </node>
          <node concept="2Cuv_b" id="6lh$fzUEh$" role="3z_lpH">
            <ref role="2Cuq_M" to="clqz:1_07M0Q77df" resolve="JunctionState" />
          </node>
          <node concept="3z_lpK" id="6lh$fzUETH" role="3z_lpH">
            <ref role="3z_lpL" to="e1tx:6GXPbpLjGfl" resolve="beforeFlight" />
          </node>
          <node concept="2Cuv_b" id="6lh$fzUFwD" role="3z_lpH">
            <ref role="2Cuq_M" to="clqz:4SJV0WTeRxt" resolve="StatemachineVariableDeclaration" />
          </node>
        </node>
        <node concept="1_0LV8" id="1CZbvxNeBIw" role="1_0VJ0">
          <node concept="19SGf9" id="6lh$fzUHZi" role="1_0LWR">
            <node concept="19SUe$" id="6lh$fzUHZj" role="19SJt6">
              <property role="19SUeA" value="We create an out event called " />
            </node>
            <node concept="3z_lpY" id="6lh$fzWCS9" role="19SJt6">
              <node concept="2NCZwO" id="6lh$fzWCSa" role="3z_lpZ">
                <node concept="2NCMab" id="6lh$fzWCSb" role="2NCMaf">
                  <ref role="2NCMaa" to="e1tx:4usdeMNVnYi" resolve="StateMachines" />
                </node>
                <node concept="2NCMab" id="6lh$fzWCSc" role="2NCMaf">
                  <ref role="2NCMaa" to="e1tx:6GXPbpLjxtH" resolve="FlightAnalyzer" />
                </node>
                <node concept="2NCMab" id="6lh$fzWCS$" role="2NCMaf">
                  <ref role="2NCMaa" to="e1tx:6GXPbpLjGjn" resolve="crashNotification" />
                </node>
              </node>
            </node>
            <node concept="19SUe$" id="6lh$fzWCSe" role="19SJt6">
              <property role="19SUeA" value=" (which will be sent when we enter the " />
            </node>
            <node concept="3z_lpY" id="6lh$fzUMYi" role="19SJt6">
              <node concept="2NCZwO" id="6lh$fzUMYj" role="3z_lpZ">
                <node concept="2NCMab" id="6lh$fzUN46" role="2NCMaf">
                  <ref role="2NCMaa" to="e1tx:4usdeMNVnYi" resolve="StateMachines" />
                </node>
                <node concept="2NCMab" id="6lh$fzUNeb" role="2NCMaf">
                  <ref role="2NCMaa" to="e1tx:6GXPbpLjxtH" resolve="FlightAnalyzer" />
                </node>
                <node concept="2NCMab" id="6lh$fzUNok" role="2NCMaf">
                  <ref role="2NCMaa" to="e1tx:6GXPbpLjGiH" resolve="crashed" />
                </node>
              </node>
            </node>
            <node concept="19SUe$" id="6lh$fzUMYh" role="19SJt6">
              <property role="19SUeA" value=" state). We then specify a binding to the out event; the binding is part of the out event definition: simply add the name of the function as the target of the arrow (in the example this is the " />
            </node>
            <node concept="3z_lpY" id="6lh$fzWCTB" role="19SJt6">
              <node concept="2NCZwO" id="6lh$fzWCTC" role="3z_lpZ">
                <node concept="2NCMab" id="6lh$fzWCTU" role="2NCMaf">
                  <ref role="2NCMaa" to="e1tx:4usdeMNVnYi" resolve="StateMachines" />
                </node>
                <node concept="2NCMab" id="6lh$fzWCUd" role="2NCMaf">
                  <ref role="2NCMaa" to="e1tx:6GXPbpLjGjh" resolve="raiseAlarm" />
                </node>
              </node>
            </node>
            <node concept="19SUe$" id="6lh$fzWCTD" role="19SJt6">
              <property role="19SUeA" value=" function). \n\nThe benefit of this approach compared to the previous one is that formal verification can check whether the notification was sent at all during the execution of the state machine. The effect is the best of both worlds: in the generated code we do call the " />
            </node>
            <node concept="3z_lpY" id="6lh$fzWCUS" role="19SJt6">
              <node concept="2NCZwO" id="6lh$fzWCUT" role="3z_lpZ">
                <node concept="2NCMab" id="6lh$fzWCUU" role="2NCMaf">
                  <ref role="2NCMaa" to="e1tx:4usdeMNVnYi" resolve="StateMachines" />
                </node>
                <node concept="2NCMab" id="6lh$fzWCUV" role="2NCMaf">
                  <ref role="2NCMaa" to="e1tx:6GXPbpLjGjh" resolve="raiseAlarm" />
                </node>
              </node>
            </node>
            <node concept="19SUe$" id="6lh$fzWCUR" role="19SJt6">
              <property role="19SUeA" value=" function, but on the state machine level we have abstracted the implementation from the intent. See " />
            </node>
            <node concept="1_0GAv" id="1CZbvxNeCTW" role="19SJt6">
              <ref role="1_0GAl" to="us0v:3JyX84yR4zp" resolve="state_machines" />
            </node>
            <node concept="19SUe$" id="1CZbvxNeCTV" role="19SJt6">
              <property role="19SUeA" value=" for a discussion of state machine verification. " />
            </node>
          </node>
        </node>
      </node>
      <node concept="1_0VNX" id="300OR6Gow9P" role="1_0VJ0">
        <property role="TrG5h" value="interactonWithOtherCodeInbound" />
        <property role="1_0VJr" value="Interaction with Other Code -- Inbound" />
        <node concept="1_0LV8" id="300OR6GoxLm" role="1_0VJ0">
          <node concept="19SGf9" id="300OR6GoxLn" role="1_0LWR">
            <node concept="19SUe$" id="300OR6GoxLo" role="19SJt6">
              <property role="19SUeA" value="Let us write some test code that interacts with a state machine. To write a meaningful test, we will have to create a whole lot of trackpoints. So to do this we create helper functions. These in turn need " />
            </node>
            <node concept="1jUjqm" id="300OR6Gozme" role="19SJt6">
              <node concept="19SGf9" id="300OR6Gozmf" role="$DsGW">
                <node concept="19SUe$" id="300OR6Gozmg" role="19SJt6">
                  <property role="19SUeA" value="malloc" />
                </node>
              </node>
            </node>
            <node concept="19SUe$" id="300OR6Gozmd" role="19SJt6">
              <property role="19SUeA" value=" and " />
            </node>
            <node concept="1jUjqm" id="300OR6Gozmn" role="19SJt6">
              <node concept="19SGf9" id="300OR6Gozmo" role="$DsGW">
                <node concept="19SUe$" id="300OR6Gozmp" role="19SJt6">
                  <property role="19SUeA" value="free" />
                </node>
              </node>
            </node>
            <node concept="19SUe$" id="300OR6Gozmm" role="19SJt6">
              <property role="19SUeA" value=", so we first create an additional external module that represents " />
            </node>
            <node concept="1jUjqm" id="300OR6Gozm$" role="19SJt6">
              <node concept="19SGf9" id="300OR6Gozm_" role="$DsGW">
                <node concept="19SUe$" id="300OR6GozmA" role="19SJt6">
                  <property role="19SUeA" value="stdlib.h" />
                </node>
              </node>
            </node>
            <node concept="19SUe$" id="300OR6Gozmz" role="19SJt6">
              <property role="19SUeA" value=":" />
            </node>
          </node>
        </node>
        <node concept="3z_lpU" id="6lh$fzWFMk" role="1_0VJ0">
          <property role="3z_lpW" value="mbeddr" />
          <property role="3z_lpJ" value="true" />
          <property role="3z_lpV" value="                                                                                                                                  &#10; stdlib_stub                                                                                                                      &#10;// contents are exported by default                                                                                               &#10;model   com.mbeddr.tutorial.documentation.code    imports nothing                                                                 &#10;                                                                                                                                  &#10;                                                                                                                                  &#10;void* malloc(size_t size);                                                                                                        &#10;void free(void* ptr);                                                                                                             &#10;                                                                                                      resources header: &lt;stdlib.h&gt;" />
          <node concept="2NCZwO" id="6lh$fzWFMl" role="3z_lpI">
            <node concept="2NCMab" id="6lh$fzWG4j" role="2NCMaf">
              <ref role="2NCMaa" to="zxcx:5dchr4QgsMd" resolve="stdlib_stub" />
            </node>
          </node>
        </node>
        <node concept="1_0LV8" id="300OR6GoI3S" role="1_0VJ0">
          <node concept="19SGf9" id="300OR6GoI3T" role="1_0LWR">
            <node concept="19SUe$" id="300OR6GoI3U" role="19SJt6">
              <property role="19SUeA" value="We can now create a helper function that creates a new " />
            </node>
            <node concept="3z_lpY" id="6lh$fzWGt6" role="19SJt6">
              <node concept="2NCZwO" id="6lh$fzWGt7" role="3z_lpZ">
                <node concept="2NCMab" id="6lh$fzWGyU" role="2NCMaf">
                  <ref role="2NCMaa" to="e1tx:1w5Xuj1QYMp" resolve="DataStructures" />
                </node>
                <node concept="2NCMab" id="6lh$fzWGGZ" role="2NCMaf">
                  <ref role="2NCMaa" to="e1tx:1w5Xuj1QYMq" resolve="Trackpoint" />
                </node>
              </node>
            </node>
            <node concept="19SUe$" id="6lh$fzWGt5" role="19SJt6">
              <property role="19SUeA" value=" based on an altitude and speed passed in as arguments:" />
            </node>
          </node>
        </node>
        <node concept="3z_lpU" id="300OR6GoO2d" role="1_0VJ0">
          <property role="3z_lpW" value="mbeddr" />
          <property role="3z_lpJ" value="true" />
          <property role="3z_lpV" value="exported Trackpoint* makeTP(int16 alt, int16 speed) {         &#10;  static int8 trackpointCounter = 0;                          &#10;  trackpointCounter++;                                        &#10;  Trackpoint* tp = ((Trackpoint*) malloc(sizeof[Trackpoint]));&#10;  tp.id = trackpointCounter;                                  &#10;  tp.time = trackpointCounter s;                              &#10;  tp.alt = alt m;                                             &#10;  tp.speed = speed mps;                                       &#10;  return tp;                                                  &#10;} makeTP (function)                                           " />
          <node concept="2NCZwO" id="1YUFCeGolE5" role="3z_lpI">
            <node concept="2NCMab" id="1YUFCeGolE6" role="2NCMaf">
              <ref role="2NCMaa" to="e1tx:4usdeMNVnYi" resolve="StateMachines" />
            </node>
            <node concept="2NCMab" id="1YUFCeGolE7" role="2NCMaf">
              <ref role="2NCMaa" to="e1tx:6GXPbpLjHh$" resolve="makeTP" />
            </node>
          </node>
        </node>
        <node concept="1_0LV8" id="300OR6GoPC0" role="1_0VJ0">
          <node concept="19SGf9" id="300OR6GoPC1" role="1_0LWR">
            <node concept="19SUe$" id="300OR6GoPC2" role="19SJt6">
              <property role="19SUeA" value="We can now start writing (and running!) the test. We first create an instance of the state machine (state machines act as types and must be instantiated). We then initialize the state machine by using the " />
            </node>
            <node concept="1jUjqm" id="300OR6GoPCO" role="19SJt6">
              <node concept="19SGf9" id="300OR6GoPCP" role="$DsGW">
                <node concept="19SUe$" id="300OR6GoPCQ" role="19SJt6">
                  <property role="19SUeA" value="init" />
                </node>
              </node>
            </node>
            <node concept="19SUe$" id="300OR6GoPCN" role="19SJt6">
              <property role="19SUeA" value=" operation:" />
            </node>
          </node>
        </node>
        <node concept="3z_lpU" id="6lh$fzZ0UI" role="1_0VJ0">
          <property role="3z_lpW" value="mbeddr" />
          <property role="3z_lpJ" value="true" />
          <property role="3z_lpV" value="exported testcase testFlightAnalyzer {                 &#10;  FlightAnalyzer f;                                    &#10;  f.init;                                              &#10;  assert(0) f.isInState(beforeFlight);                 &#10;  assert(1) f.points == 0;                             &#10;  f.trigger(next|makeTP(0, 20));                       &#10;  assert(2) f.isInState(beforeFlight) &amp;&amp; f.points == 0;&#10;  f.trigger(next|makeTP(100, 100));                    &#10;  assert(3) f.isInState(airborne) &amp;&amp; f.points == 100;  &#10;  test statemachine f {                                &#10;  next(makeTP(200, 100)) ➔ airborne                    &#10;  next(makeTP(300, 150)) ➔ airborne                    &#10;  next(makeTP(0, 90)) ➔ landing                        &#10;  next(makeTP(0, 0)) ➔ landed                          &#10;}                                                      &#10;  assert-equals(4) f.points == 200;                    &#10;} testFlightAnalyzer(test case)                        " />
          <node concept="2NCZwO" id="6lh$fzZ0UJ" role="3z_lpI">
            <node concept="2NCMab" id="6lh$fzZ2Wv" role="2NCMaf">
              <ref role="2NCMaa" to="e1tx:4usdeMNVnYi" resolve="StateMachines" />
            </node>
            <node concept="2NCMab" id="6lh$fzZ2Z3" role="2NCMaf">
              <ref role="2NCMaa" to="e1tx:6GXPbpLjseN" resolve="testFlightAnalyzer" />
            </node>
          </node>
          <node concept="3z_lpK" id="6lh$fzZ32X" role="3z_lpH">
            <ref role="3z_lpL" to="e1tx:6lh$fzXT$n" resolve="sm_test_1a" />
          </node>
          <node concept="3z_lpK" id="6lh$fzZ3c3" role="3z_lpH">
            <ref role="3z_lpL" to="e1tx:6lh$fzXUEw" resolve="sm_test_1b" />
          </node>
          <node concept="3z_lpK" id="6lh$fzZ3iL" role="3z_lpH">
            <ref role="3z_lpL" to="e1tx:6lh$fzXXi4" resolve="sm_test_2a" />
          </node>
          <node concept="3z_lpK" id="6lh$fzZ3sj" role="3z_lpH">
            <ref role="3z_lpL" to="e1tx:6lh$fzY1TL" resolve="sm_test_2b" />
          </node>
          <node concept="3z_lpK" id="6lh$fzZ3$q" role="3z_lpH">
            <ref role="3z_lpL" to="e1tx:6lh$fzY4xn" resolve="sm_test_3a" />
          </node>
          <node concept="3z_lpK" id="6lh$fzZ3G_" role="3z_lpH">
            <ref role="3z_lpL" to="e1tx:6lh$fzY9kk" resolve="sm_test_3b" />
          </node>
          <node concept="3z_lpK" id="6lh$fzZ3Np" role="3z_lpH">
            <ref role="3z_lpL" to="e1tx:6lh$fzXGTb" resolve="sm_test_4a" />
          </node>
          <node concept="3z_lpK" id="6lh$fzZ3WD" role="3z_lpH">
            <ref role="3z_lpL" to="e1tx:6lh$fzYPn1" resolve="sm_test_4b" />
          </node>
        </node>
        <node concept="1_0LV8" id="300OR6GoRf5" role="1_0VJ0">
          <node concept="19SGf9" id="300OR6GoRf6" role="1_0LWR">
            <node concept="19SUe$" id="300OR6GoRf7" role="19SJt6">
              <property role="19SUeA" value="Initially we should be in the " />
            </node>
            <node concept="3z_lpY" id="6lh$f$4tJI" role="19SJt6">
              <node concept="2NCZwO" id="6lh$f$4tJJ" role="3z_lpZ">
                <node concept="2NCMab" id="6lh$f$4tJO" role="2NCMaf">
                  <ref role="2NCMaa" to="e1tx:4usdeMNVnYi" resolve="StateMachines" />
                </node>
                <node concept="2NCMab" id="6lh$f$4tJT" role="2NCMaf">
                  <ref role="2NCMaa" to="e1tx:6GXPbpLjxtH" resolve="FlightAnalyzer" />
                </node>
                <node concept="2NCMab" id="6lh$f$4tK1" role="2NCMaf">
                  <ref role="2NCMaa" to="e1tx:6GXPbpLjGfl" resolve="beforeFlight" />
                </node>
              </node>
            </node>
            <node concept="19SUe$" id="6lh$f$4tJH" role="19SJt6">
              <property role="19SUeA" value=" state. We can check this with an assertion:" />
            </node>
          </node>
        </node>
        <node concept="3z_lpU" id="6lh$f$4tOA" role="1_0VJ0">
          <property role="3z_lpW" value="mbeddr" />
          <property role="3z_lpV" value="exported testcase testFlightAnalyzer {                 &#10;  f.init;                                              &#10;  assert(0) f.isInState(beforeFlight);                 &#10;  assert(1) f.points == 0;                             &#10;  f.trigger(next|makeTP(0, 20));                       &#10;  assert(2) f.isInState(beforeFlight) &amp;&amp; f.points == 0;&#10;  f.trigger(next|makeTP(100, 100));                    &#10;  assert(3) f.isInState(airborne) &amp;&amp; f.points == 100;  &#10;  test statemachine f {                                &#10;  next(makeTP(200, 100)) ➔ airborne                    &#10;  next(makeTP(300, 150)) ➔ airborne                    &#10;  next(makeTP(0, 90)) ➔ landing                        &#10;  next(makeTP(0, 0)) ➔ landed                          &#10;}                                                      &#10;  assert-equals(4) f.points == 200;                    &#10;} testFlightAnalyzer(test case)                        " />
          <property role="3z_lpJ" value="false" />
          <node concept="2NCZwO" id="6lh$f$4tOB" role="3z_lpI">
            <node concept="2NCMab" id="6lh$f$4tOC" role="2NCMaf">
              <ref role="2NCMaa" to="e1tx:4usdeMNVnYi" resolve="StateMachines" />
            </node>
            <node concept="2NCMab" id="6lh$f$4tOD" role="2NCMaf">
              <ref role="2NCMaa" to="e1tx:6GXPbpLjseN" resolve="testFlightAnalyzer" />
            </node>
          </node>
          <node concept="3z_lpK" id="6lh$f$4tOF" role="3z_lpH">
            <ref role="3z_lpL" to="e1tx:6lh$fzXUEw" resolve="sm_test_1b" />
          </node>
          <node concept="3z_lpK" id="6lh$f$4tOG" role="3z_lpH">
            <ref role="3z_lpL" to="e1tx:6lh$fzXXi4" resolve="sm_test_2a" />
          </node>
          <node concept="3z_lpK" id="6lh$f$4tOH" role="3z_lpH">
            <ref role="3z_lpL" to="e1tx:6lh$fzY1TL" resolve="sm_test_2b" />
          </node>
          <node concept="3z_lpK" id="6lh$f$4tOI" role="3z_lpH">
            <ref role="3z_lpL" to="e1tx:6lh$fzY4xn" resolve="sm_test_3a" />
          </node>
          <node concept="3z_lpK" id="6lh$f$4tOJ" role="3z_lpH">
            <ref role="3z_lpL" to="e1tx:6lh$fzY9kk" resolve="sm_test_3b" />
          </node>
          <node concept="3z_lpK" id="6lh$f$4tOK" role="3z_lpH">
            <ref role="3z_lpL" to="e1tx:6lh$fzXGTb" resolve="sm_test_4a" />
          </node>
          <node concept="3z_lpK" id="6lh$f$4tOL" role="3z_lpH">
            <ref role="3z_lpL" to="e1tx:6lh$fzYPn1" resolve="sm_test_4b" />
          </node>
          <node concept="3z_lpK" id="6lh$f$4u1Z" role="3z_lpH">
            <ref role="3z_lpL" to="e1tx:6GXPbpLjHk6" resolve="f" />
          </node>
          <node concept="3z_lpK" id="6lh$f$4ub2" role="3z_lpH">
            <ref role="3z_lpL" to="e1tx:6lh$fzXLji" resolve="sm_init" />
          </node>
        </node>
        <node concept="1_0LV8" id="300OR6GoUr2" role="1_0VJ0">
          <node concept="19SGf9" id="300OR6GoUr3" role="1_0LWR">
            <node concept="19SUe$" id="300OR6GoUr4" role="19SJt6">
              <property role="19SUeA" value="We also want to make sure that the value of " />
            </node>
            <node concept="1jUjqm" id="300OR6GoW0u" role="19SJt6">
              <node concept="19SGf9" id="300OR6GoW0v" role="$DsGW">
                <node concept="19SUe$" id="300OR6GoW0w" role="19SJt6">
                  <property role="19SUeA" value="points" />
                </node>
              </node>
            </node>
            <node concept="19SUe$" id="300OR6GoW0t" role="19SJt6">
              <property role="19SUeA" value=" is zero initially. Since we have declared the " />
            </node>
            <node concept="1jUjqm" id="1CZbvxNeDAT" role="19SJt6">
              <node concept="19SGf9" id="1CZbvxNeDAU" role="$DsGW">
                <node concept="19SUe$" id="1CZbvxNeDAV" role="19SJt6">
                  <property role="19SUeA" value="points" />
                </node>
              </node>
            </node>
            <node concept="19SUe$" id="1CZbvxNeDAX" role="19SJt6">
              <property role="19SUeA" value=" variable to be writable above, we can write: " />
            </node>
          </node>
        </node>
        <node concept="3z_lpU" id="6lh$f$4usf" role="1_0VJ0">
          <property role="3z_lpW" value="mbeddr" />
          <property role="3z_lpV" value="exported testcase testFlightAnalyzer {                 &#10;  f.init;                                              &#10;  assert(0) f.isInState(beforeFlight);                 &#10;  assert(1) f.points == 0;                             &#10;  f.trigger(next|makeTP(0, 20));                       &#10;  assert(2) f.isInState(beforeFlight) &amp;&amp; f.points == 0;&#10;  f.trigger(next|makeTP(100, 100));                    &#10;  assert(3) f.isInState(airborne) &amp;&amp; f.points == 100;  &#10;  test statemachine f {                                &#10;  next(makeTP(200, 100)) ➔ airborne                    &#10;  next(makeTP(300, 150)) ➔ airborne                    &#10;  next(makeTP(0, 90)) ➔ landing                        &#10;  next(makeTP(0, 0)) ➔ landed                          &#10;}                                                      &#10;  assert-equals(4) f.points == 200;                    &#10;} testFlightAnalyzer(test case)                        " />
          <property role="3z_lpJ" value="false" />
          <node concept="2NCZwO" id="6lh$f$4usg" role="3z_lpI">
            <node concept="2NCMab" id="6lh$f$4ush" role="2NCMaf">
              <ref role="2NCMaa" to="e1tx:4usdeMNVnYi" resolve="StateMachines" />
            </node>
            <node concept="2NCMab" id="6lh$f$4usi" role="2NCMaf">
              <ref role="2NCMaa" to="e1tx:6GXPbpLjseN" resolve="testFlightAnalyzer" />
            </node>
          </node>
          <node concept="3z_lpK" id="6lh$f$4usj" role="3z_lpH">
            <ref role="3z_lpL" to="e1tx:6lh$fzXT$n" resolve="sm_test_1a" />
          </node>
          <node concept="3z_lpK" id="6lh$f$4usk" role="3z_lpH">
            <ref role="3z_lpL" to="e1tx:6lh$fzXXi4" resolve="sm_test_2a" />
          </node>
          <node concept="3z_lpK" id="6lh$f$4usl" role="3z_lpH">
            <ref role="3z_lpL" to="e1tx:6lh$fzY1TL" resolve="sm_test_2b" />
          </node>
          <node concept="3z_lpK" id="6lh$f$4usm" role="3z_lpH">
            <ref role="3z_lpL" to="e1tx:6lh$fzY4xn" resolve="sm_test_3a" />
          </node>
          <node concept="3z_lpK" id="6lh$f$4usn" role="3z_lpH">
            <ref role="3z_lpL" to="e1tx:6lh$fzY9kk" resolve="sm_test_3b" />
          </node>
          <node concept="3z_lpK" id="6lh$f$4uso" role="3z_lpH">
            <ref role="3z_lpL" to="e1tx:6lh$fzXGTb" resolve="sm_test_4a" />
          </node>
          <node concept="3z_lpK" id="6lh$f$4usp" role="3z_lpH">
            <ref role="3z_lpL" to="e1tx:6lh$fzYPn1" resolve="sm_test_4b" />
          </node>
          <node concept="3z_lpK" id="6lh$f$4usq" role="3z_lpH">
            <ref role="3z_lpL" to="e1tx:6GXPbpLjHk6" resolve="f" />
          </node>
          <node concept="3z_lpK" id="6lh$f$4usr" role="3z_lpH">
            <ref role="3z_lpL" to="e1tx:6lh$fzXLji" resolve="sm_init" />
          </node>
        </node>
        <node concept="1_0LV8" id="300OR6GoZd5" role="1_0VJ0">
          <node concept="19SGf9" id="300OR6GoZd6" role="1_0LWR">
            <node concept="19SUe$" id="300OR6GoZd7" role="19SJt6">
              <property role="19SUeA" value="Let us now create the first trackpoint and pass it in. This one has speed, but no altitude, so we are in the take-off run. We assume that we remain in the " />
            </node>
            <node concept="1jUjqm" id="300OR6GoZe1" role="19SJt6">
              <node concept="19SGf9" id="300OR6GoZe2" role="$DsGW">
                <node concept="19SUe$" id="300OR6GoZe3" role="19SJt6">
                  <property role="19SUeA" value="beforeFlight" />
                </node>
              </node>
            </node>
            <node concept="19SUe$" id="300OR6GoZe0" role="19SJt6">
              <property role="19SUeA" value=" state and that we still have 0 points. Notice how we use the " />
            </node>
            <node concept="1jUjqm" id="1CZbvxNeEda" role="19SJt6">
              <node concept="19SGf9" id="1CZbvxNeEdb" role="$DsGW">
                <node concept="19SUe$" id="1CZbvxNeEdc" role="19SJt6">
                  <property role="19SUeA" value="trigger" />
                </node>
              </node>
            </node>
            <node concept="19SUe$" id="1CZbvxNeEde" role="19SJt6">
              <property role="19SUeA" value="  operation on the state machine instance. It takes the event as well as its arguments (if any):" />
            </node>
          </node>
        </node>
        <node concept="3z_lpU" id="6lh$f$4uUz" role="1_0VJ0">
          <property role="3z_lpW" value="mbeddr" />
          <property role="3z_lpV" value="exported testcase testFlightAnalyzer {                 &#10;  f.init;                                              &#10;  assert(0) f.isInState(beforeFlight);                 &#10;  assert(1) f.points == 0;                             &#10;  f.trigger(next|makeTP(0, 20));                       &#10;  assert(2) f.isInState(beforeFlight) &amp;&amp; f.points == 0;&#10;  f.trigger(next|makeTP(100, 100));                    &#10;  assert(3) f.isInState(airborne) &amp;&amp; f.points == 100;  &#10;  test statemachine f {                                &#10;  next(makeTP(200, 100)) ➔ airborne                    &#10;  next(makeTP(300, 150)) ➔ airborne                    &#10;  next(makeTP(0, 90)) ➔ landing                        &#10;  next(makeTP(0, 0)) ➔ landed                          &#10;}                                                      &#10;  assert-equals(4) f.points == 200;                    &#10;} testFlightAnalyzer(test case)                        " />
          <property role="3z_lpJ" value="false" />
          <node concept="2NCZwO" id="6lh$f$4uU$" role="3z_lpI">
            <node concept="2NCMab" id="6lh$f$4uU_" role="2NCMaf">
              <ref role="2NCMaa" to="e1tx:4usdeMNVnYi" resolve="StateMachines" />
            </node>
            <node concept="2NCMab" id="6lh$f$4uUA" role="2NCMaf">
              <ref role="2NCMaa" to="e1tx:6GXPbpLjseN" resolve="testFlightAnalyzer" />
            </node>
          </node>
          <node concept="3z_lpK" id="6lh$f$4uUB" role="3z_lpH">
            <ref role="3z_lpL" to="e1tx:6lh$fzXUEw" resolve="sm_test_1b" />
          </node>
          <node concept="3z_lpK" id="6lh$f$4vhA" role="3z_lpH">
            <ref role="3z_lpL" to="e1tx:6lh$fzXT$n" resolve="sm_test_1a" />
          </node>
          <node concept="3z_lpK" id="6lh$f$4uUE" role="3z_lpH">
            <ref role="3z_lpL" to="e1tx:6lh$fzY4xn" resolve="sm_test_3a" />
          </node>
          <node concept="3z_lpK" id="6lh$f$4uUF" role="3z_lpH">
            <ref role="3z_lpL" to="e1tx:6lh$fzY9kk" resolve="sm_test_3b" />
          </node>
          <node concept="3z_lpK" id="6lh$f$4uUG" role="3z_lpH">
            <ref role="3z_lpL" to="e1tx:6lh$fzXGTb" resolve="sm_test_4a" />
          </node>
          <node concept="3z_lpK" id="6lh$f$4uUH" role="3z_lpH">
            <ref role="3z_lpL" to="e1tx:6lh$fzYPn1" resolve="sm_test_4b" />
          </node>
          <node concept="3z_lpK" id="6lh$f$4uUI" role="3z_lpH">
            <ref role="3z_lpL" to="e1tx:6GXPbpLjHk6" resolve="f" />
          </node>
          <node concept="3z_lpK" id="6lh$f$4uUJ" role="3z_lpH">
            <ref role="3z_lpL" to="e1tx:6lh$fzXLji" resolve="sm_init" />
          </node>
        </node>
        <node concept="1_0LV8" id="300OR6Gp1Es" role="1_0VJ0">
          <node concept="19SGf9" id="300OR6Gp1Et" role="1_0LWR">
            <node concept="19SUe$" id="300OR6Gp1Eu" role="19SJt6">
              <property role="19SUeA" value="Now we lift off by setting the alt to 100 meters:" />
            </node>
          </node>
        </node>
        <node concept="3z_lpU" id="6lh$f$4vLX" role="1_0VJ0">
          <property role="3z_lpW" value="mbeddr" />
          <property role="3z_lpJ" value="true" />
          <property role="3z_lpV" value="exported testcase testFlightAnalyzer {                 &#10;  f.init;                                              &#10;  assert(0) f.isInState(beforeFlight);                 &#10;  assert(1) f.points == 0;                             &#10;  f.trigger(next|makeTP(0, 20));                       &#10;  assert(2) f.isInState(beforeFlight) &amp;&amp; f.points == 0;&#10;  f.trigger(next|makeTP(100, 100));                    &#10;  assert(3) f.isInState(airborne) &amp;&amp; f.points == 100;  &#10;  test statemachine f {                                &#10;  next(makeTP(200, 100)) ➔ airborne                    &#10;  next(makeTP(300, 150)) ➔ airborne                    &#10;  next(makeTP(0, 90)) ➔ landing                        &#10;  next(makeTP(0, 0)) ➔ landed                          &#10;}                                                      &#10;  assert-equals(4) f.points == 200;                    &#10;} testFlightAnalyzer(test case)                        " />
          <node concept="2NCZwO" id="6lh$f$4vLY" role="3z_lpI">
            <node concept="2NCMab" id="6lh$f$4vLZ" role="2NCMaf">
              <ref role="2NCMaa" to="e1tx:4usdeMNVnYi" resolve="StateMachines" />
            </node>
            <node concept="2NCMab" id="6lh$f$4vM0" role="2NCMaf">
              <ref role="2NCMaa" to="e1tx:6GXPbpLjseN" resolve="testFlightAnalyzer" />
            </node>
          </node>
          <node concept="3z_lpK" id="6lh$f$4vM1" role="3z_lpH">
            <ref role="3z_lpL" to="e1tx:6lh$fzXUEw" resolve="sm_test_1b" />
          </node>
          <node concept="3z_lpK" id="6lh$f$4vM2" role="3z_lpH">
            <ref role="3z_lpL" to="e1tx:6lh$fzXXi4" resolve="sm_test_2a" />
          </node>
          <node concept="3z_lpK" id="6lh$f$4vM3" role="3z_lpH">
            <ref role="3z_lpL" to="e1tx:6lh$fzY1TL" resolve="sm_test_2b" />
          </node>
          <node concept="3z_lpK" id="6lh$f$4w3P" role="3z_lpH">
            <ref role="3z_lpL" to="e1tx:6lh$fzXT$n" resolve="sm_test_1a" />
          </node>
          <node concept="3z_lpK" id="6lh$f$4vM6" role="3z_lpH">
            <ref role="3z_lpL" to="e1tx:6lh$fzXGTb" resolve="sm_test_4a" />
          </node>
          <node concept="3z_lpK" id="6lh$f$4vM7" role="3z_lpH">
            <ref role="3z_lpL" to="e1tx:6lh$fzYPn1" resolve="sm_test_4b" />
          </node>
          <node concept="3z_lpK" id="6lh$f$4vM8" role="3z_lpH">
            <ref role="3z_lpL" to="e1tx:6GXPbpLjHk6" resolve="f" />
          </node>
          <node concept="3z_lpK" id="6lh$f$4vM9" role="3z_lpH">
            <ref role="3z_lpL" to="e1tx:6lh$fzXLji" resolve="sm_init" />
          </node>
        </node>
        <node concept="1_0LV8" id="300OR6Gp468" role="1_0VJ0">
          <node concept="19SGf9" id="300OR6Gp469" role="1_0LWR">
            <node concept="19SUe$" id="300OR6Gp46a" role="19SJt6">
              <property role="19SUeA" value="So as you can see it is easy to interact from regular C code with a state machine. For testing, we have special support that checks if the state machine transitions to the desired state if a specific event is triggered. Here is some example code (note that you can use the " />
            </node>
            <node concept="1jUjqm" id="300OR6Gp5G8" role="19SJt6">
              <node concept="19SGf9" id="300OR6Gp5G9" role="$DsGW">
                <node concept="19SUe$" id="300OR6Gp5Ga" role="19SJt6">
                  <property role="19SUeA" value="test statemachine" />
                </node>
              </node>
            </node>
            <node concept="19SUe$" id="300OR6Gp5G7" role="19SJt6">
              <property role="19SUeA" value=" construct only within test cases):" />
            </node>
          </node>
        </node>
        <node concept="3z_lpU" id="6lh$f$4wqR" role="1_0VJ0">
          <property role="3z_lpW" value="mbeddr" />
          <property role="3z_lpJ" value="true" />
          <property role="3z_lpV" value="exported testcase testFlightAnalyzer {                 &#10;  f.init;                                              &#10;  assert(0) f.isInState(beforeFlight);                 &#10;  assert(1) f.points == 0;                             &#10;  f.trigger(next|makeTP(0, 20));                       &#10;  assert(2) f.isInState(beforeFlight) &amp;&amp; f.points == 0;&#10;  f.trigger(next|makeTP(100, 100));                    &#10;  assert(3) f.isInState(airborne) &amp;&amp; f.points == 100;  &#10;  test statemachine f {                                &#10;  next(makeTP(200, 100)) ➔ airborne                    &#10;  next(makeTP(300, 150)) ➔ airborne                    &#10;  next(makeTP(0, 90)) ➔ landing                        &#10;  next(makeTP(0, 0)) ➔ landed                          &#10;}                                                      &#10;  assert-equals(4) f.points == 200;                    &#10;} testFlightAnalyzer(test case)                        " />
          <node concept="2NCZwO" id="6lh$f$4wqS" role="3z_lpI">
            <node concept="2NCMab" id="6lh$f$4wqT" role="2NCMaf">
              <ref role="2NCMaa" to="e1tx:4usdeMNVnYi" resolve="StateMachines" />
            </node>
            <node concept="2NCMab" id="6lh$f$4wqU" role="2NCMaf">
              <ref role="2NCMaa" to="e1tx:6GXPbpLjseN" resolve="testFlightAnalyzer" />
            </node>
          </node>
          <node concept="3z_lpK" id="6lh$f$4wH6" role="3z_lpH">
            <ref role="3z_lpL" to="e1tx:6lh$fzXT$n" resolve="sm_test_1a" />
          </node>
          <node concept="3z_lpK" id="6lh$f$4wqV" role="3z_lpH">
            <ref role="3z_lpL" to="e1tx:6lh$fzXUEw" resolve="sm_test_1b" />
          </node>
          <node concept="3z_lpK" id="6lh$f$4wqW" role="3z_lpH">
            <ref role="3z_lpL" to="e1tx:6lh$fzXXi4" resolve="sm_test_2a" />
          </node>
          <node concept="3z_lpK" id="6lh$f$4wqX" role="3z_lpH">
            <ref role="3z_lpL" to="e1tx:6lh$fzY1TL" resolve="sm_test_2b" />
          </node>
          <node concept="3z_lpK" id="6lh$f$4wqY" role="3z_lpH">
            <ref role="3z_lpL" to="e1tx:6lh$fzY4xn" resolve="sm_test_3a" />
          </node>
          <node concept="3z_lpK" id="6lh$f$4wqZ" role="3z_lpH">
            <ref role="3z_lpL" to="e1tx:6lh$fzY9kk" resolve="sm_test_3b" />
          </node>
          <node concept="3z_lpK" id="6lh$f$4wr1" role="3z_lpH">
            <ref role="3z_lpL" to="e1tx:6lh$fzYPn1" resolve="sm_test_4b" />
          </node>
          <node concept="3z_lpK" id="6lh$f$4wr2" role="3z_lpH">
            <ref role="3z_lpL" to="e1tx:6GXPbpLjHk6" resolve="f" />
          </node>
          <node concept="3z_lpK" id="6lh$f$4wr3" role="3z_lpH">
            <ref role="3z_lpL" to="e1tx:6lh$fzXLji" resolve="sm_init" />
          </node>
        </node>
        <node concept="1_0LV8" id="300OR6Gp87a" role="1_0VJ0">
          <node concept="19SGf9" id="300OR6Gp87b" role="1_0LWR">
            <node concept="19SUe$" id="300OR6Gp87c" role="19SJt6">
              <property role="19SUeA" value="You may have noticed that the helper function allocates the new " />
            </node>
            <node concept="3z_lpY" id="6lh$f$4x6I" role="19SJt6">
              <node concept="2NCZwO" id="6lh$f$4x6J" role="3z_lpZ">
                <node concept="2NCMab" id="6lh$f$4xa_" role="2NCMaf">
                  <ref role="2NCMaa" to="e1tx:1w5Xuj1QYMp" resolve="DataStructures" />
                </node>
                <node concept="2NCMab" id="6lh$f$4xh3" role="2NCMaf">
                  <ref role="2NCMaa" to="e1tx:1w5Xuj1QYMq" resolve="Trackpoint" />
                </node>
              </node>
            </node>
            <node concept="19SUe$" id="6lh$f$4x6H" role="19SJt6">
              <property role="19SUeA" value="s on the heap, without releasing the memory. You could simply call " />
            </node>
            <node concept="1jUjqm" id="1VdI9nUBUqP" role="19SJt6">
              <node concept="19SGf9" id="1VdI9nUBUqQ" role="$DsGW">
                <node concept="19SUe$" id="1VdI9nUBUqR" role="19SJt6">
                  <property role="19SUeA" value="free" />
                </node>
              </node>
            </node>
            <node concept="19SUe$" id="1VdI9nUBUqO" role="19SJt6">
              <property role="19SUeA" value=" on these newly created structures after the test statement has been executed or allocate the trackpoints on the stack to solve this problem." />
            </node>
          </node>
        </node>
      </node>
      <node concept="1_0VNX" id="300OR6Gq8ek" role="1_0VJ0">
        <property role="TrG5h" value="hierarchicalStateMachines" />
        <property role="1_0VJr" value="Hierarchical State Machines" />
        <node concept="1_0LV8" id="300OR6Gq9TY" role="1_0VJ0">
          <node concept="19SGf9" id="300OR6Gq9TZ" role="1_0LWR">
            <node concept="19SUe$" id="300OR6Gq9U0" role="19SJt6">
              <property role="19SUeA" value="State machines can also be hierarchical. This means that a state may contain essentially a sub-state machine. The following piece of code shows an example. It was derived from the previous flight judgement example, but the three " />
            </node>
            <node concept="3z_lpY" id="6lh$fzXpKd" role="19SJt6">
              <node concept="2NCZwO" id="6lh$fzXpKe" role="3z_lpZ">
                <node concept="2NCMab" id="6lh$fzXpQ1" role="2NCMaf">
                  <ref role="2NCMaa" to="e1tx:4usdeMNVnYi" resolve="StateMachines" />
                </node>
                <node concept="2NCMab" id="6lh$fzXq0a" role="2NCMaf">
                  <ref role="2NCMaa" to="e1tx:7prHJyKFEw9" resolve="HierarchicalFlightAnalyzer" />
                </node>
                <node concept="2NCMab" id="6lh$fzXq8W" role="2NCMaf">
                  <ref role="2NCMaa" to="e1tx:7prHJyKFEwS" resolve="flying" />
                </node>
              </node>
            </node>
            <node concept="19SUe$" id="1CZbvxNeJd$" role="19SJt6">
              <property role="19SUeA" value=", " />
            </node>
            <node concept="3z_lpY" id="6lh$fzXqpc" role="19SJt6">
              <node concept="2NCZwO" id="6lh$fzXqpd" role="3z_lpZ">
                <node concept="2NCMab" id="6lh$fzXqpe" role="2NCMaf">
                  <ref role="2NCMaa" to="e1tx:4usdeMNVnYi" resolve="StateMachines" />
                </node>
                <node concept="2NCMab" id="6lh$fzXqpf" role="2NCMaf">
                  <ref role="2NCMaa" to="e1tx:7prHJyKFEw9" resolve="HierarchicalFlightAnalyzer" />
                </node>
                <node concept="2NCMab" id="6lh$fzXq_t" role="2NCMaf">
                  <ref role="2NCMaa" to="e1tx:7prHJyKFExG" resolve="landing" />
                </node>
              </node>
            </node>
            <node concept="19SUe$" id="1CZbvxNeJd_" role="19SJt6">
              <property role="19SUeA" value=" and " />
            </node>
            <node concept="3z_lpY" id="6lh$fzXqvs" role="19SJt6">
              <node concept="2NCZwO" id="6lh$fzXqvt" role="3z_lpZ">
                <node concept="2NCMab" id="6lh$fzXqvu" role="2NCMaf">
                  <ref role="2NCMaa" to="e1tx:4usdeMNVnYi" resolve="StateMachines" />
                </node>
                <node concept="2NCMab" id="6lh$fzXqvv" role="2NCMaf">
                  <ref role="2NCMaa" to="e1tx:7prHJyKFEw9" resolve="HierarchicalFlightAnalyzer" />
                </node>
                <node concept="2NCMab" id="6lh$fzXqF4" role="2NCMaf">
                  <ref role="2NCMaa" to="e1tx:7prHJyKFExZ" resolve="landed" />
                </node>
              </node>
            </node>
            <node concept="19SUe$" id="1CZbvxNeJdA" role="19SJt6">
              <property role="19SUeA" value=" states are now nested inside the " />
            </node>
            <node concept="3z_lpY" id="6lh$fzXqRJ" role="19SJt6">
              <node concept="2NCZwO" id="6lh$fzXqRK" role="3z_lpZ">
                <node concept="2NCMab" id="6lh$fzXqRL" role="2NCMaf">
                  <ref role="2NCMaa" to="e1tx:4usdeMNVnYi" resolve="StateMachines" />
                </node>
                <node concept="2NCMab" id="6lh$fzXqRM" role="2NCMaf">
                  <ref role="2NCMaa" to="e1tx:7prHJyKFEw9" resolve="HierarchicalFlightAnalyzer" />
                </node>
                <node concept="2NCMab" id="6lh$fzXqZ8" role="2NCMaf">
                  <ref role="2NCMaa" to="e1tx:7prHJyKFEvQ" resolve="airborne" />
                </node>
              </node>
            </node>
            <node concept="19SUe$" id="1CZbvxNeJdB" role="19SJt6">
              <property role="19SUeA" value=" composite state. Composite states can be created in the state machine by typing " />
            </node>
            <node concept="1jUjqm" id="2XVA19iNNHF" role="19SJt6">
              <node concept="19SGf9" id="2XVA19iNNHG" role="$DsGW">
                <node concept="19SUe$" id="2XVA19iNNHH" role="19SJt6">
                  <property role="19SUeA" value="composite state" />
                </node>
              </node>
            </node>
            <node concept="19SUe$" id="1CZbvxNeJdC" role="19SJt6">
              <property role="19SUeA" value=". " />
            </node>
          </node>
        </node>
        <node concept="3z_lpU" id="300OR6Gqj2f" role="1_0VJ0">
          <property role="3z_lpW" value="mbeddr" />
          <property role="3z_lpJ" value="true" />
          <property role="3z_lpV" value="exported statemachine HierarchicalFlightAnalyzer initial = beforeFlight {&#10;  macro stopped(next) = tp.speed == 0 mps                                &#10;  macro onTheGround(next) = tp.alt == 0 m                                &#10;  in event next(Trackpoint* tp) &lt;no binding&gt;                             &#10;  in event reset() &lt;no binding&gt;                                          &#10;  out event crashNotification() =&gt; raiseAlarm                            &#10;  readable var int16 points = 0                                          &#10;  state beforeFlight {                                                   &#10;  entry { points = 0; }                                                  &#10;  on next [tp.alt &gt; 0 m] -&gt; airborne                                     &#10;  exit { points += TAKEOFF; }                                            &#10;} state beforeFlight                                                     &#10;  composite state airborne initial = flying {                            &#10;  on reset [ ] -&gt; beforeFlight { points = 0; }                           &#10;  on next [onTheGround &amp;&amp; stopped] -&gt; crashed                            &#10;  state flying (airborne.flying) {                                       &#10;  on next [onTheGround &amp;&amp; tp.speed &gt; 0 mps] -&gt; landing                   &#10;  on next [tp.speed &gt; 200 mps] -&gt; flying { points += VERY_HIGH_SPEED; }  &#10;  on next [tp.speed &gt; 100 mps] -&gt; flying { points += HIGH_SPEED; }       &#10;} state flying                                                           &#10;  state landing (airborne.landing) {                                     &#10;  on next [stopped] -&gt; landed                                            &#10;  on next [ ] -&gt; landing { points--; }                                   &#10;} state landing                                                          &#10;  state landed (airborne.landed) {                                       &#10;  entry { points += LANDING; }                                           &#10;} state landed                                                           &#10;} state airborne                                                         &#10;  state crashed {                                                        &#10;  entry { send crashNotification(); }                                    &#10;} state crashed                                                          &#10;}                                                                        " />
          <node concept="2NCZwO" id="1YUFCeGolCg" role="3z_lpI">
            <node concept="2NCMab" id="1YUFCeGolCh" role="2NCMaf">
              <ref role="2NCMaa" to="e1tx:4usdeMNVnYi" resolve="StateMachines" />
            </node>
            <node concept="2NCMab" id="3_mefG85g7I" role="2NCMaf">
              <ref role="2NCMaa" to="e1tx:7prHJyKFEw9" resolve="HierarchicalFlightAnalyzer" />
            </node>
          </node>
        </node>
        <node concept="1_0LV8" id="1CZbvxNeEjp" role="1_0VJ0">
          <node concept="19SGf9" id="1CZbvxNeEjq" role="1_0LWR">
            <node concept="19SUe$" id="1CZbvxNeEjr" role="19SJt6">
              <property role="19SUeA" value="Here are the semantics:" />
            </node>
          </node>
        </node>
        <node concept="3X6WG5" id="300OR6Gq9Ua" role="1_0VJ0">
          <node concept="3X6T9g" id="300OR6Gq9Ug" role="3Xp5NH">
            <node concept="OjmMv" id="300OR6Gq9Uh" role="3X6T9h">
              <node concept="19SGf9" id="300OR6Gq9Ui" role="OjmMu">
                <node concept="19SUe$" id="300OR6Gq9Uj" role="19SJt6">
                  <property role="19SUeA" value="When a transition from outside a composite state targets a composite state, the initial state in that composite state is activated." />
                </node>
              </node>
            </node>
          </node>
          <node concept="3X6T9g" id="300OR6Gqbv8" role="3Xp5NH">
            <node concept="OjmMv" id="300OR6Gqbv9" role="3X6T9h">
              <node concept="19SGf9" id="300OR6Gqbva" role="OjmMu">
                <node concept="19SUe$" id="300OR6Gqbvb" role="19SJt6">
                  <property role="19SUeA" value="A composite state can have its own transitions. These act as if they were defined for each of the states of the composite state." />
                </node>
              </node>
            </node>
          </node>
          <node concept="3X6T9g" id="300OR6Gqd44" role="3Xp5NH">
            <node concept="OjmMv" id="300OR6Gqd45" role="3X6T9h">
              <node concept="19SGf9" id="300OR6Gqd46" role="OjmMu">
                <node concept="19SUe$" id="300OR6Gqd47" role="19SJt6">
                  <property role="19SUeA" value="If a transition from an inner state " />
                </node>
                <node concept="1jUjqm" id="1CZbvxNeHNe" role="19SJt6">
                  <node concept="19SGf9" id="1CZbvxNeHNf" role="$DsGW">
                    <node concept="19SUe$" id="1CZbvxNeHNg" role="19SJt6">
                      <property role="19SUeA" value="A" />
                    </node>
                  </node>
                </node>
                <node concept="19SUe$" id="1CZbvxNeHNi" role="19SJt6">
                  <property role="19SUeA" value=" crosses a composite state-boundary " />
                </node>
                <node concept="1jUjqm" id="1CZbvxNeHTo" role="19SJt6">
                  <node concept="19SGf9" id="1CZbvxNeHTp" role="$DsGW">
                    <node concept="19SUe$" id="1CZbvxNeHTq" role="19SJt6">
                      <property role="19SUeA" value="B" />
                    </node>
                  </node>
                </node>
                <node concept="19SUe$" id="1CZbvxNeHTs" role="19SJt6">
                  <property role="19SUeA" value=", then the actions happen in the following order: exit actions of " />
                </node>
                <node concept="1jUjqm" id="1CZbvxNeHZA" role="19SJt6">
                  <node concept="19SGf9" id="1CZbvxNeHZB" role="$DsGW">
                    <node concept="19SUe$" id="1CZbvxNeHZC" role="19SJt6">
                      <property role="19SUeA" value="A" />
                    </node>
                  </node>
                </node>
                <node concept="19SUe$" id="1CZbvxNeHZE" role="19SJt6">
                  <property role="19SUeA" value=", exit actions of " />
                </node>
                <node concept="1jUjqm" id="1CZbvxNeI5S" role="19SJt6">
                  <node concept="19SGf9" id="1CZbvxNeI5T" role="$DsGW">
                    <node concept="19SUe$" id="1CZbvxNeI5U" role="19SJt6">
                      <property role="19SUeA" value="B" />
                    </node>
                  </node>
                </node>
                <node concept="19SUe$" id="1CZbvxNeI5W" role="19SJt6">
                  <property role="19SUeA" value=", transition action, and entry action of the transition's target (which is outside of the composite state)." />
                </node>
              </node>
            </node>
          </node>
        </node>
      </node>
      <node concept="1_0VNX" id="1CZbvxNeKM5" role="1_0VJ0">
        <property role="TrG5h" value="tabularNotation" />
        <property role="1_0VJr" value="Tabular Notation" />
        <node concept="1_0LV8" id="1CZbvxNeKVy" role="1_0VJ0">
          <node concept="19SGf9" id="1CZbvxNeKVz" role="1_0LWR">
            <node concept="19SUe$" id="1CZbvxNeKV$" role="19SJt6">
              <property role="19SUeA" value="State machines can also be rendered and edited as a table: the events become the column headers, and the states become the row headers. " />
            </node>
            <node concept="2Sbdz4" id="4I$rsvbfgU7" role="19SJt6">
              <ref role="2SbdyP" node="4I$rsvbfgE9" resolve="smtable" />
            </node>
            <node concept="19SUe$" id="4I$rsvbfgU8" role="19SJt6">
              <property role="19SUeA" value=" shows an example. You can switch projection modes the usual way via the " />
            </node>
            <node concept="2OlAs7" id="4I$rsvbfgUc" role="19SJt6">
              <node concept="19SGf9" id="4I$rsvbfgUd" role="$DsGW">
                <node concept="19SUe$" id="4I$rsvbfgUe" role="19SJt6">
                  <property role="19SUeA" value="Code-&gt;Projection Modes" />
                </node>
              </node>
            </node>
            <node concept="19SUe$" id="4I$rsvbfgUf" role="19SJt6">
              <property role="19SUeA" value="." />
            </node>
          </node>
        </node>
        <node concept="2SaynC" id="4I$rsvbfgE9" role="1_0VJ0">
          <property role="TrG5h" value="smtable" />
          <property role="2Sbq$t" value="true" />
          <node concept="2Sb_l4" id="4I$rsvbfgEs" role="2SbwM5">
            <property role="2Sb_kV" value="smtable.png" />
            <ref role="2Sb_kU" to="ntnz:2fBMM_3XZ4F" resolve="smimages" />
          </node>
          <node concept="OjmMv" id="4I$rsvbfgEd" role="2SaI5j">
            <node concept="19SGf9" id="4I$rsvbfgEe" role="OjmMu">
              <node concept="19SUe$" id="4I$rsvbfgEf" role="19SJt6">
                <property role="19SUeA" value="The " />
              </node>
              <node concept="1jUjqm" id="4I$rsvbfgUz" role="19SJt6">
                <node concept="19SGf9" id="4I$rsvbfgU$" role="$DsGW">
                  <node concept="19SUe$" id="4I$rsvbfgU_" role="19SJt6">
                    <property role="19SUeA" value="FlightAnalyzer" />
                  </node>
                </node>
              </node>
              <node concept="19SUe$" id="4I$rsvbfgUB" role="19SJt6">
                <property role="19SUeA" value=" state machine shown as a table." />
              </node>
            </node>
          </node>
          <node concept="2bctqb" id="4I$rsvbfgEh" role="3SHJ_F" />
        </node>
      </node>
      <node concept="1_0VNX" id="300OR6GqkIJ" role="1_0VJ0">
        <property role="TrG5h" value="stateMachineDiagrams" />
        <property role="1_0VJr" value="State Machine Diagrams" />
        <node concept="1_0LV8" id="300OR6GqkPU" role="1_0VJ0">
          <node concept="19SGf9" id="300OR6GqkPV" role="1_0LWR">
            <node concept="19SUe$" id="300OR6GqkPW" role="19SJt6">
              <property role="19SUeA" value="State machines can also be visualized with PlantUML (a graphical editor will be done soon). The visualization can be generated from the context menu of the state machine. You may want to use the " />
            </node>
            <node concept="1jUjqm" id="3_mefG85MiR" role="19SJt6">
              <node concept="19SGf9" id="3_mefG85MiS" role="$DsGW">
                <node concept="19SUe$" id="3_mefG85MiT" role="19SJt6">
                  <property role="19SUeA" value="statechart" />
                </node>
              </node>
            </node>
            <node concept="19SUe$" id="3_mefG85MiQ" role="19SJt6">
              <property role="19SUeA" value=" or " />
            </node>
            <node concept="1jUjqm" id="3_mefG85PmK" role="19SJt6">
              <node concept="19SGf9" id="3_mefG85PmL" role="$DsGW">
                <node concept="19SUe$" id="3_mefG85PmM" role="19SJt6">
                  <property role="19SUeA" value="statechart (short)" />
                </node>
              </node>
            </node>
            <node concept="19SUe$" id="3_mefG85PmJ" role="19SJt6">
              <property role="19SUeA" value=", the former one displays all information for the transitions while the latter one will only print the event's name which triggers the given transition.\n\n" />
            </node>
            <node concept="2Sbdz4" id="2XVA19iNVvs" role="19SJt6">
              <ref role="2SbdyP" node="300OR6GqmqP" resolve="vsm" />
            </node>
            <node concept="19SUe$" id="2XVA19iNVvr" role="19SJt6">
              <property role="19SUeA" value=" shows an example visualization for the hierarchical state machine that was described in the previous section." />
            </node>
          </node>
        </node>
        <node concept="2SaynC" id="300OR6GqmqP" role="1_0VJ0">
          <property role="TrG5h" value="vsm" />
          <property role="1DKIkx" value="true" />
          <node concept="2Sb_l4" id="300OR6GqnZS" role="2SbwM5">
            <property role="2Sb_kV" value="tutorial/v_sm.png" />
            <ref role="2Sb_kU" to="ntnz:2fBMM_3XZ4D" resolve="images" />
          </node>
          <node concept="OjmMv" id="300OR6GqmqT" role="2SaI5j">
            <node concept="19SGf9" id="300OR6GqmqU" role="OjmMu">
              <node concept="19SUe$" id="300OR6GqmqV" role="19SJt6">
                <property role="19SUeA" value="A visualization of a state machine in mbeddr. You can click on the states and transitions to select the respective element in the editor." />
              </node>
            </node>
          </node>
          <node concept="3SGHZ$" id="300OR6Gqp$E" role="3SHJ_F">
            <property role="3SGHZ_" value="40" />
          </node>
        </node>
      </node>
    </node>
    <node concept="1_0j5j" id="2XVA19iNIfu" role="1DXQ57">
      <ref role="1_0j5g" node="yrKNEnw4lA" resolve="C_Units" />
    </node>
    <node concept="1_0j5j" id="2XVA19iNIfA" role="1DXQ57">
      <ref role="1_0j5g" node="6UY8Kx5iuLF" resolve="B_DecisionTables" />
    </node>
  </node>
</model>

