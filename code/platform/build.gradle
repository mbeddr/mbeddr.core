plugins {
    id 'base'
    id 'maven-publish'
    id 'buildlogic.mps-conventions'
    id "org.cyclonedx.bom" version "2.4.1"
}


import de.itemis.mps.gradle.BuildLanguages
import de.itemis.mps.gradle.EnvironmentKind
import de.itemis.mps.gradle.RunAntScript
import de.itemis.mps.gradle.TestLanguages
import de.itemis.mps.gradle.tasks.MpsGenerate
import groovy.transform.Immutable
import groovy.transform.TupleConstructor

import javax.xml.parsers.DocumentBuilderFactory

def script_test_mbeddrPlatform = new File(scriptsBasePath, "com.mbeddr.platform/build-ts-tests.xml")
def script_mbeddrPlatform_sandboxes = new File(scriptsBasePath, "com.mbeddr.platform/build-sandboxes.xml")
ext.reportsDir = rootProject.layout.buildDirectory.dir("reports").get().asFile

// Project group
group = 'com.mbeddr'

configurations {
    mpsLibraries { canBeConsumed = false }
}

dependencies {
    if (project.hasProperty('mpsExtensionsZip')) {
        mpsLibraries files(project.property('mpsExtensionsZip'))
    } else {
        mpsLibraries "de.itemis.mps:extensions:$mpsExtensionsVersion"
    }
}

@TupleConstructor
class BundledDep {
    String name
    List<String> notations
    String modulePath
    Closure depConfigClosure = { transitive = false }
    String getConfigName() {
        name + '_bundled'
    }
    String getTaskName() {
        'resolve_' + this.configName
    }
}

def bundledDeps = [
        new BundledDep('commonmark', ['org.commonmark:commonmark:0.27.0'], 'com.mbeddr.doc/languages/com.mbeddr.doc.gen_markdown'),
        new BundledDep('poi-ooxml', ['org.apache.poi:poi-ooxml:5.4.1'], 'com.mbeddr.doc/solutions/com.mbeddr.spreadsheet.libs', {
            exclude module: 'commons-compress'
            exclude module: 'commons-math3'
            exclude module: 'SparseBitSet'
        }),
        new BundledDep('jung', ['net.sf.jung:jung-3d-demos:2.0.1',
                                'net.sf.jung:jung-jai-samples:2.0.1'], 'com.mbeddr.mpsutil/languages/com.mbeddr.mpsutil.jung/solutions/pluginSolution', {
            exclude module: 'stax-api'
        }),
        new BundledDep('jfreechart', ['org.jfree:jfreechart:1.5.6'], 'com.mbeddr.mpsutil/solutions/com.mbeddr.mpsutil.jfreechart.runtime', {}),
        new BundledDep('plantuml', ['net.sourceforge.plantuml:plantuml:1.2025.8'], 'com.mbeddr.mpsutil/solutions/com.mbeddr.mpsutil.plantuml/solutions/pluginSolution'),
        new BundledDep('opencsv', ['au.com.bytecode:opencsv:2.4'], 'com.mbeddr.mpsutil/solutions/com.opencsv'),
        new BundledDep('mockito', ['org.mockito:mockito-core:5.20.0'], 'com.mbeddr.mpsutil/solutions/org.mockito', {}),
        new BundledDep('ecore', ['org.eclipse.emf:org.eclipse.emf.ecore.xcore:1.34.0'], 'com.mbeddr.mpsutil/solutions/com.mbeddr.mpsutil.ecore.stubs', {
            exclude module: 'aopalliance'
            exclude module: 'antlr-runtime'
            exclude module: 'org.eclipse.osgi'
            exclude module: 'org.eclipse.xtend.lib'
            exclude module: 'guava'
        })
]

bundledDeps.each {bd ->
    configurations {
        create(bd.configName)
    }
    dependencies {
        bd.notations.each {depNotation ->
            add(bd.configName, depNotation, bd.depConfigClosure)
        }
    }
    tasks.create(bd.taskName, Sync.class) {
        from configurations.getByName(bd.configName)
        into file("${bd.modulePath}/lib")

        // Strip version numbers from file names
        rename { filename ->
            def ra = configurations.getByName(bd.configName).resolvedConfiguration.resolvedArtifacts.find { ResolvedArtifact ra -> ra.file.name == filename }
            String finalName
            if (ra.classifier != null) {
                finalName = "${ra.name}-${ra.classifier}.${ra.extension}"
            } else {
                finalName = "${ra.name}.${ra.extension}"
            }
            return finalName
        }
    }
}

tasks.register('resolveBundledLibraries') {
    dependsOn << bundledDeps.collect {it.taskName }
}

tasks.register('resolveMpsLibraries', Sync) {
    description 'Download the MPS libraries that are used in this project.'
    from configurations.mpsLibraries.elements.map { it.collect(project.&zipTree) }
    into rootProject.layout.buildDirectory.dir('dependencies')
}

tasks.register('build_allScripts', MpsGenerate) {
    description 'Generates the build script that contains all other build scripts.'
    javaLauncher = jbrToolchain.javaLauncher
    environmentKind = EnvironmentKind.MPS
    mpsHome = mpsHomeProvider

    projectLocation = file('com.mbeddr.platform.build')
    pluginRoots.from(tasks.named('resolveMpsLibraries', Sync).map { it.destinationDir })
    pluginRoots.from(mpsHome.dir('plugins'))

    folderMacros.put('mbeddr.github.core.home', rootProject.layout.projectDirectory)
}

task build_actionsfilter(type: BuildLanguages, dependsOn: ['build_allScripts']) {
    script scriptFile('com.mbeddr.platform/actionsfilter.xml')
    description 'Builds the actions filter IntelliJ plugin.'
    // see comment in build_allScripts, above, for reasons we need to explicitly state task output
    // to address NO-SOURCE failure for package_mbeddrPlatform
    outputs.dir(new File(artifactsDir, 'com.mbeddr.mpsutil.actionsfilter/'))
    outputs.upToDateWhen { false }
}

task build_platform(type: BuildLanguages, dependsOn: ['build_allScripts', build_actionsfilter]) {
    script scriptFile('com.mbeddr.platform/build.xml')
    description 'Build the mbeddr platform.'
    outputs.dir(new File(artifactsDir, 'com.mbeddr.platform/'))
    outputs.upToDateWhen { false }
    dependsOn 'resolveBundledLibraries'
}

task install_actionsfilter(type: Copy, dependsOn: build_actionsfilter) {
    description 'Copy the actions filter IntelliJ plugin to the MPS plugin\'s directory'
    from "$rootDir/artifacts/com.mbeddr.mpsutil.actionsfilter/"
    include "com.mbeddr.mpsutil.actionsfilter/"
    into(mpsPluginsDir)
}
tasks.getByPath(':com.mbeddr:install').dependsOn install_actionsfilter

tasks.register('generate_mbeddr_platform_tests', RunAntScript) {
    dependsOn build_platform
    script script_test_mbeddrPlatform
    description 'Build the mbeddr platform tests.'
    targets 'generate'
}

tasks.register('generate_platform_sandboxes', RunAntScript) {
    dependsOn build_platform
    script script_mbeddrPlatform_sandboxes
    description 'Build the mbeddr platform sandboxes.'
    targets 'generate'
}

tasks.register('generate_platform_languages') {
    dependsOn build_platform, generate_mbeddr_platform_tests, generate_platform_sandboxes
}

task test_mbeddr_platform(type: TestLanguages, dependsOn: [build_platform, generate_mbeddr_platform_tests]) {
    script script_test_mbeddrPlatform
    description 'Execute typesystem and generator tests for the mbeddr plaform.'
    targets 'check'
}

tasks.register('test') {
    dependsOn(test_mbeddr_platform)
    description 'Run all tests in the mbeddr platform.'
}

tasks.named('check') {
    dependsOn('test')
    description 'Run all checks.'
}

task build_platform_distribution(type: BuildLanguages, dependsOn: [build_platform, test_mbeddr_platform]) {
    script scriptFile('com.mbeddr.platform/build-distribution.xml')
    description 'Build the platform describution.'
}

task package_mbeddrPlatform(type: Zip, dependsOn: [build_platform, cyclonedxBom]) {
    description 'Package the mbeddr platform.'
    archiveFileName = 'com.mbeddr.platform.zip'
    from(artifactsDir) {
        include "com.mbeddr.platform/**"
    }
    from(reportsDir) {
        include 'sbom.json'
        into 'com.mbeddr.platform'
    }
}

artifacts {
    'default'(package_mbeddrPlatform)
}


task defaultWrapper(dependsOn: build_platform) {
    doFirst {
        println "####################################################################################"
        println "#                      THE DEFAULT TASK HAS BEEN CHANGED                           #"
        println "#                                                                                  #"
        println "# The default task now only builds the mbeddr platform and no longer all of mbeddr #"
        println "# including the C part. In order to build everything you will have to invoke the   #"
        println "# task build_mbeddr. This will give you the old behaviour of building everything.  #"
        println "####################################################################################"
    }

}

rootProject.defaultTasks 'defaultWrapper'

task publishMbeddrPlatformToLocal(dependsOn: ['publishMbeddrPlatformPublicationToMavenLocal']) {
    description 'Publish the mbeddr platform to the local Maven repository.'
}

List<File> getPomsOfConfiguration(Configuration cfg) {
    List<ComponentIdentifier> componentIds =
            configurations.mpsLibraries.incoming.resolutionResult.allDependencies
                    .findAll { it instanceof ResolvedDependencyResult }
                    .collect { ((ResolvedDependencyResult) it).selected.id }

    ArtifactResolutionResult resolutionResult = dependencies.createArtifactResolutionQuery()
            .forComponents(componentIds)
            .withArtifacts(MavenModule, MavenPomArtifact)
            .execute()

    return resolutionResult
            .resolvedComponents.collectMany { it.getArtifacts(MavenPomArtifact) }
            .findAll { it instanceof ResolvedArtifactResult }
            .collect { ((ResolvedArtifactResult) it).file }
}

@Immutable
class Coordinates {
    String groupId
    String artifactId
    String version
    String classifier
    String type
}

List<Coordinates> getProvidedDependenciesFromPom(File pomFile) {
    def doc = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(pomFile)

    List<Coordinates> result = new ArrayList<>()

    // Add actual <scope>provided</scope> deps
    def deps = doc.getElementsByTagName("dependency")
    for (i in 0..deps.length - 1) {
        def d = deps.item(i)

        def kids = d.childNodes
        String g = null
        String a = null
        String v = null
        String c = null
        String t = null
        String s = null
        for (k in 0..kids.length - 1) {
            switch (kids.item(k).nodeName) {
                case "groupId": g = kids.item(k).textContent.trim(); break
                case "artifactId": a = kids.item(k).textContent.trim(); break
                case "version": v = kids.item(k).textContent.trim(); break
                case "classifier": c = kids.item(k).textContent.trim(); break
                case "type": t = kids.item(k).textContent.trim(); break
                case "scope": s = kids.item(k).textContent.trim(); break
            }
        }
        if (s == "provided") {
            result.add(new Coordinates(g, a, v, c, t))
        }
    }

    return result
}

publishing {
    publications {
        mbeddrPlatform(MavenPublication) {
            groupId 'com.mbeddr'
            artifactId 'platform'
            version mbeddrPlatformBuildNumber
            artifact package_mbeddrPlatform
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')

                List<Configuration> configurationsWithProvidedDependencies = [
                        configurations.mpsLibraries,
                        *bundledDeps.collect { configurations[it.configName] }
                ]
                if (!project.skipresolve_mps) {
                    configurationsWithProvidedDependencies.add(project(':com.mbeddr').configurations.mps)
                }

                configurationsWithProvidedDependencies.each { Configuration cfg ->
                    cfg.resolvedConfiguration.firstLevelModuleDependencies.each {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.moduleGroup)
                        dependencyNode.appendNode('artifactId', it.moduleName)
                        dependencyNode.appendNode('version', it.moduleVersion)
                        dependencyNode.appendNode('type', it.moduleArtifacts[0].type)
                        dependencyNode.appendNode('scope', 'provided')
                    }
                }

                // Add provided dependencies of mpsLibraries (i.e. libraries bundled with MPS-extensions)
                List<File> pomsOfMpsLibraries = getPomsOfConfiguration(configurations.mpsLibraries)
                List<Coordinates> providedDependenciesOfMpsLibraries = pomsOfMpsLibraries.collectMany { getProvidedDependenciesFromPom(it) }

                providedDependenciesOfMpsLibraries.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.groupId)
                    dependencyNode.appendNode('artifactId', it.artifactId)
                    dependencyNode.appendNode('version', it.version)
                    if (it.classifier != null) {
                        dependencyNode.appendNode('classifier', it.classifier)
                    }
                    if (it.type != null) {
                        dependencyNode.appendNode('type', it.type)
                    }
                    dependencyNode.appendNode('scope', 'provided')
                }
            }
            pom additionalPomInfo
        }
    }
}

//mbeddr build is "master" also for maintenance branches
//using the closure to delay evaluate from configuration to execution phase is important because the
//mbeddrBuild property is created by a "subproject" block which is executed after this script is configured.
//if no closure is used the build script won't compile.
if({project.mbeddrBuild}() == "master") {
    /* this is pretty much a workaround so we don't need to change anything in Teamcity. Teamcity calls the  publishMbeddrPlatformPublicationToMavenRepository
       tasks but since we have a new publishing target we would need to change the teamcity config to also include publishMbeddrPlatformPublicationToGitHubPackagesRepository
       If we change the Teamcity configuration this would break older maintenance and feature branches and we would loose the ablilty to
       rebuild the exact same source code. There for this workaround is present that adds a dependency between the itemis maven repo
       and github packages when we are on master or a maintenance branch.
       */
    tasks.findByName("publishMbeddrPlatformPublicationToMavenRepository").dependsOn("publishMbeddrPlatformPublicationToGitHubPackagesRepository")
}

cyclonedxBom {
    // SBOM destination directory
    destination = reportsDir
    // The file name for the generated SBOMs (before the file format suffix)
    outputName = "sbom"
    // The file format generated, can be xml, json or all for generating both
    outputFormat = "json"
    // Don't include license texts in generated SBOMs
    includeLicenseText = false
    // Include runtime deps only (bundled libs, language libs, mps, jbr)
    def runtimeConfigs = bundledDeps.collect {it.configName }
    runtimeConfigs << configurations.mpsLibraries.name
    // TODO: mps config cannot be handled by cyclonedxBom, since it's located in com.mbeddr project
    //runtimeConfigs << project(':com.mbeddr').configurations.mps.name
    runtimeConfigs << 'jbr'
    includeConfigs = runtimeConfigs
}
