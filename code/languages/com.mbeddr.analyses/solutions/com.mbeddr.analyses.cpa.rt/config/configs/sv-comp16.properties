# ----------------------------------------------------------------------
# This configuration file uses a sequential combination
# of three different analyses, namely a value analysis,
# a bounded model checking analysis with k-induction,
# and a predicate analysis, in a total of sic different
# configurations.
# This configuration file also specifies the configuration
# to be used for reachability properties on recursive
# programs and for properties regarding memory safety.
# ----------------------------------------------------------------------

# The specification to check in SV-COMP'16
# specification = specification/sv-comp-reachability.spc

# The file to which the counterexample is written (required by competition).
cpa.arg.errorPath.file = ErrorPath.txt

# The file to which the witness is written (required by competition).
cpa.arg.errorPath.graphml = witness.graphml

# Disable all output except the error path.
output.disable = false

# Disable statistics for memory consumption.
statistics.memory = false

# Multi edges are not important for our efficiency,
# but prevent precise witnesses and concurrency analysis
cfa.useMultiEdges = false

# Simplified CFA is bad for witnesses
cfa.simplifyCfa = false

# CFA branch swapping is bad for witnesses
cfa.allowBranchSwapping = false

# Do not export constant values for pointers
# if an external tool is supposed to check the witness:
# the concrete value we use might not make sense in a real setting
counterexample.export.assumptions.includeConstantsForPointers = false

# Use sequential combination of analyses.
analysis.restartAfterUnknown = true

# if we find a concurrent program, we copy the CFA to avoid coliding functionnames.
cfa.useCFACloningForMultiThreadedPrograms=true

# The analyses used for (non-recursive) reachability properties.
restartAlgorithm.configFiles = components/sv-comp16--01-valueAnalysis.properties, components/sv-comp16--02-valueAnalysis-itp.properties, components/sv-comp16--03-bmc-k-induction.properties, components/sv-comp16--04-predicateAnalysis-bitprecise.properties, components/sv-comp16--recursion.properties::if-recursive, components/sv-comp16--concurrency.properties::if-concurrent

# The analyses used for memory safety properties;
# everything in this file is then ignored.
memorysafety.config = sv-comp16--memorysafety.properties

# This is the configuration used when verifying the overflow property;
# everything in this file is then ignored.
overflow.config = sv-comp16--overflow.properties

# Tell all analyses to skip (non-explicit) recursion
analysis.summaryEdges = true
cpa.callstack.skipVoidRecursion = true
cpa.callstack.skipFunctionPointerRecursion = true

# enable float handling in predicate analysis
cpa.predicate.encodeFloatAs = RATIONAL

cpa.predicate.encodeBitvectorAs = RATIONAL

solver.solver = SMTInterpol

# malloc never returns null according to SV-Comp rules
cpa.predicate.memoryAllocationsAlwaysSucceed = true
