#include predicateAnalysisBackward.properties

CompositeCPA.cpas = cpa.partitioning.PartitioningCPA, cpa.location.LocationCPABackwards, cpa.callstack.CallstackCPA, cpa.functionpointer.FunctionPointerCPA, cpa.predicate.PredicateCPA

cpa.callstack.traverseBackwards=true

analysis.refinePreconditions=true
analysis.algorithm.CEGAR=False

backwardSpecification=../specification/no-successor-on-error.spc

# This only controls the behaviour in the case we have a waitlist with elements left
analysis.stopAfterError=True 

cpa.predicate.synthesizePrecisionOnAbstraction=False
cpa.predicate.precision.sharing=FUNCTION

cpa.predicate.handlePointerAliasing=False
cpa.predicate.handleArrays=True

solver.solver=Z3

cpa.predicate.blk.alwaysAtFunctionHeads=False
cpa.predicate.blk.alwaysAtEntryFunctionHead=True
cpa.predicate.blk.alwaysAtLoops=True

# SAT check of block formulas. This might have big influence on the
# performance. Benchmark it in detail!!
cpa.predicate.satCheck=1

cpa.predicate.abstraction.simplify=True

# Export of the WP
precondition.export.type=SMTLIB
precondition.export.target=precondition.txt

# cpa.predicate.abstraction.computation=CARTESIAN
cpa.predicate.abstraction.computation=BOOLEAN
# cpa.predicate.blk.threshold=1
cpa.predicate.merge=SEP
cpa.predicate.abstraction.elimDeadVariablePreds=true

cfa.findLiveVariables=True
